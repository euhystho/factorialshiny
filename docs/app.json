[{"name":"app.R","content":"#\n# This is a Shiny web application. You can run the application by clicking\n# the 'Run App' button above.\n#\n\n# Shiny-related UI libraries \nlibrary(shiny)\nlibrary(shinyjs)\nlibrary(shinyWidgets)\nlibrary(bslib)\nlibrary(bsicons)\n\n#Plot related libraries\nlibrary(plotly)\nlibrary(kableExtra)\nlibrary(tidyverse)\n\n#Factorial Design related libraries\nlibrary(AlgDesign)\n\n\ncards <- list(\n  card(\n    card_header(\"Interaction Plot\"),\n    min_height = 625,\n    card_body(\n      layout_columns(\n        value_box(\n          title = \"Standard Deviation\",\n          value = textOutput(\"sd\"),\n          showcase = bs_icon(\"badge-sd-fill\"),\n        ),\n        value_box(\n          title = \"Change in Health\",\n          value = textOutput(\"health_change\"),\n          showcase = bs_icon(\"heart-pulse-fill\"),\n        ),\n      ),\n      plotOutput(\"interaction_plot\")\n    ),\n\n  ),\n  card(\n    card_header(\"ANOVA Table\"),\n    min_height = 10,\n    tableOutput(\"anova\")\n  ),\n  card(\n    card_header(\"Factorial Design Table\"),\n    min_height = 10,\n    uiOutput(\"design\")\n  ),\n  card(\n    card_header(\"Factorial Design Plot through Plotly\"),\n    min_height = 625,\n    plotlyOutput(\"factorial\")\n  )\n)\n\n\n# Define UI for application\nui <- page_sidebar(\n  useShinyjs(),\n  # Application Bootswatch Theme\n  theme = bs_theme(\n    bootswatch = \"journal\"\n  ),\n  # Application title\n  title = \"Effects of Self-Efficacy on Post-Menopausal Women\",\n  \n  # Mobile Friendly:\n  fillable_mobile = TRUE,\n  # Sidebar with a slider input for number of bins \n  sidebar = sidebar(\n    title = \"Health Dimensions\",\n    width = 300,\n    fillable = TRUE,\n    accordion_filters <- accordion(\n      id = \"dims\",\n      accordion_panel(\n        \"Physical Health\",\n        icon = bs_icon(\"heart-pulse-fill\"),\n        checkboxGroupButtons(\"phys\",\n                             \"Select the following subfactors:\",\n                             choices = c(\"Nutrition\", \"Sleep\", \"Exercise\"),\n                             size = 'sm',\n        ),\n        div(id = \"nutrition\",\n            card(\n              card_header(\"Nutrition\"),\n              sliderTextInput(\"calorie_slider\",\n                              \"Caloric Intake:\",\n                              grid = TRUE,\n                              force_edges = TRUE,\n                              choices = c(\n                                \"Below Target\",\n                                \"At Target\",\n                                \"Above Target\")\n              ),\n              sliderTextInput(\"protein_slider\",\n                              \"Protein Intake:\",\n                              grid = TRUE,\n                              force_edges = TRUE,\n                              choices = c(\n                                \"Below Target\",\n                                \"At Target\",\n                                \"Above Target\")\n              ),\n              sliderTextInput(\"fat_slider\",\n                              \"Fat Intake:\",\n                              grid = TRUE,\n                              force_edges = TRUE,\n                              choices = c(\n                                \"Below Target\",\n                                \"At Target\",\n                                \"Above Target\")\n              ),\n              sliderTextInput(\"carb_slider\",\n                              \"Carbohydrate Intake:\",\n                              grid = TRUE,\n                              force_edges = TRUE,\n                              choices = c(\n                                \"Below Target\",\n                                \"At Target\",\n                                \"Above Target\")\n              ),\n              sliderTextInput(\"fasting_slider\",\n                              \"Choose the type of fasting:\",\n                              grid = TRUE,\n                              force_edges = TRUE,\n                              choices = c(\n                                \"Dry\",\n                                \"Water\",\n                                \"Intermittent\")\n              ),\n              sliderTextInput(\"other_nutr_slider\",\n                              \"Choose how much of any other nutritional factor:\",\n                              grid = TRUE,\n                              force_edges = TRUE,\n                              choices = c(\n                                \"Below Target\",\n                                \"At Target\",\n                                \"Above Target\")\n              ),\n            )\n        ),\n        div(id = \"sleep\",\n            card(\n              card_header(\"Sleep\"),\n              sliderInput(\"sleep_quan_slider\", \n                          \"Choose how many hours of Sleep:\",\n                          min = 0, max = 10, value = c(7,9)),\n              sliderTextInput(\"sleep_qual_slider\",\n                              \"Choose the quality of Sleep:\",\n                              grid = TRUE,\n                              force_edges = TRUE,\n                              choices = c(\n                                \"Terrible\",\n                                \"Excellent\")\n              ), \n              sliderInput(\"sleep_eat_slider\", \n                          \"Choose how many hours since eating before bed:\",\n                          min = 0, max = 8, value = 3,\n              ),\n              sliderInput(\"screentime_slider\", \n                          \"Choose how much screentime before bed:\",\n                          min = 0, max = 5, value = 3,\n              ),\n              sliderInput(\"melatonin_slider\", \n                          \"Choose how many mgs of Melatonin are taken before bed:\",\n                          min = 0, max = 10, value = 0,\n              ),\n            ), # Added missing comma here\n        ),\n        div(id = \"exercise\",\n            card(\n              card_header(\"Exercise\"),\n              sliderTextInput(\"swim_slider\",\n                              \"Choose the intensity of Swimming:\",\n                              grid = TRUE,\n                              force_edges = TRUE,\n                              choices = c(\n                                \"Moderate\",\n                                \"Intense\")\n              ),\n              sliderTextInput(\"run_slider\",\n                              \"Choose the intensity of Running:\",\n                              grid = TRUE,\n                              force_edges = TRUE,\n                              choices = c(\n                                \"Moderate\",\n                                \"Intense\")\n              ),\n              sliderTextInput(\"walk_slider\",\n                              \"Choose the intensity of Walking:\",\n                              grid = TRUE,\n                              force_edges = TRUE,\n                              choices = c(\n                                \"Moderate\",\n                                \"Intense\")\n              ),\n              sliderTextInput(\"hike_slider\",\n                              \"Choose the intensity of Hiking:\",\n                              grid = TRUE,\n                              force_edges = TRUE,\n                              choices = c(\n                                \"Moderate\",\n                                \"Intense\")\n              ),\n              sliderTextInput(\"bike_slider\",\n                              \"Choose the intensity of Biking:\",\n                              grid = TRUE,\n                              force_edges = TRUE,\n                              choices = c(\n                                \"Moderate\",\n                                \"Intense\")\n              ),\n              sliderTextInput(\"team_slider\",\n                              \"Choose the intensity of Team Sport:\",\n                              grid = TRUE,\n                              force_edges = TRUE,\n                              choices = c(\n                                \"Moderate\",\n                                \"Intense\")\n              ),\n              sliderTextInput(\"weight_slider\",\n                              \"Choose the intensity of Weightlifting:\",\n                              grid = TRUE,\n                              force_edges = TRUE,\n                              choices = c(\n                                \"Moderate\",\n                                \"Intense\")\n              ),\n              sliderTextInput(\"other_exerc_slider\",\n                              \"Choose the intensity of Other Exercise:\",\n                              grid = TRUE,\n                              force_edges = TRUE,\n                              choices = c(\n                                \"Moderate\",\n                                \"Intense\")\n              ),\n            )\n        ),\n      ),\n      accordion_panel(\n        \"Social Health\",\n        icon = bs_icon(\"people-fill\"),\n        card (\n          sliderInput(\"socialhours_slider\", \"Specify amount of hours socializing with non-friends per week:\",\n                      min = 0, max = 21, value = 10),\n          sliderInput(\"vol_slider\",\n                          \"Specify the amount of time a week spent doing community service:\",\n                      min = 0, max = 30, value = 10),\n          sliderInput(\"friends_slider\", \"Specify the amount of hours socializing with friends per week:\",\n                      min= 0, max = 25, value = 10)\n        )\n      ),\n      accordion_panel(\n        \"Mental Health\",\n        icon = bs_icon(\"person-circle\"),\n        card(\n          sliderInput(\"read_slider\", \"Choose how many hours spent reading:\",\n                      min = 0, max = 15, value = 5),\n          sliderInput(\"journal_slider\", \"Choose how many hours spent journalling:\",\n                      min = 0, max = 5, value = 3),\n          sliderInput(\"mental_slider\", \"Choose how many hours engaging in an activity that promotes wellbeing:\",\n                      min = 0, max = 20, value = 2)\n        )\n\n      ),\n      accordion_panel(\n        \"Spiritual Health\",\n        icon = bs_icon(\"yin-yang\"),\n        card(\n          sliderInput(\"meditate_slider\", \"Choose how many hours a week spent meditating:\",\n                      min = 0, max = 5, value = 2),\n          sliderInput(\"mindful_slider\", \"Choose how many hours a week are spent practicing mindfulness:\",\n                      min = 0, max = 5, value = 1),\n          sliderInput(\"religious_slider\", \"Choose how many hours a week spent at a religious institution:\",\n                      min = 0, max = 10, value = 3),\n          sliderInput(\"pray_slider\", \"Choose how many hours a week spent praying:\",\n                      min = 0, max = 3, value = 1),\n          sliderInput(\"yoga_slider\", \"Choose how many hours a week spent doing yoga:\",\n                      min = 0, max = 5, value = 3),\n          sliderInput(\"sacred_slider\", \"Choose how many hours a week are spent studying sacred texts:\",\n                      min = 0, max = 10, value = 2),\n          sliderInput(\"spirit_slider\", \"Choose how many hours a week are spent on other spiritual activities:\",\n                      min= 0, max = 10, value = 2)\n        )\n\n      ),\n    ),\n  ),\n  tabsetPanel(\n    tabPanel(\n      title = \"Interaction Plot\",\n      cards[[1]], \n    ),\n    tabPanel(\n      title = \"Design Cube(s)\",\n      cards[[4]]\n    ),\n    layout_columns(cards[[3]], cards[[2]])\n  )\n  \n)\n\n# Define server logic\nserver <- function(input, output) {\n  f <- reactiveValues(\n    data = NULL,\n    design = NULL,\n    result = NULL,\n    std_dev = NULL,\n    health_value = NULL\n  )\n  \n  \n  # Hide all the Sliders by default\n  observe({\n    isolate({\n      shinyjs::hide(\"nutrition\")\n      shinyjs::hide(\"sleep\")\n      shinyjs::hide(\"exercise\")\n    })\n  })\n  \n  observeEvent(input$phys,{\n    # Hides all the Sliders\n    shinyjs::hide(\"nutrition\")\n    shinyjs::hide(\"sleep\")\n    shinyjs::hide(\"exercise\")\n    \n    # Dynamically shows slider based on which Subfactor is chosen:\n    if (\"Nutrition\" %in% input$phys){\n      shinyjs::show(\"nutrition\")\n    } \n    if (\"Sleep\" %in% input$phys){\n      shinyjs::show(\"sleep\")\n    }\n    if (\"Exercise\" %in% input$phys){\n      shinyjs::show(\"exercise\")\n    } \n  })\n  \n  factorCalc <- reactive({\n    # Create a vector of the number of levels for each factor\n    levels <- c(2,2)\n    \n    # Factor names:\n    factorNames <- c(\"Nutrition\", \n                     \"Sleep\")\n    \n    # Generate the full factorial design\n    design <- gen.factorial(levels, nVars = 2, varNames = factorNames)\n    \n    thickness<-c(rnorm(15, 2.5, 2.5), rnorm(15, 3, 2.5), \n                 rnorm(15, 3.5, 2.5), rnorm(15, 2, 2.5)\n                 ) \n    \n    Sleep_Hours <- c(rep(\"Insufficient\",15), rep(\"Sufficient\",15), \n                     rep(\"Sufficient\",15), rep(\"Insufficient\",15)\n    ) \n    \n    Exercise_Hours <- c(rep(\"Intense\",30), rep(\"Moderate\",30), \n                        rep(\"Intense\",30), rep(\"Moderate\",30)\n    )\n    \n    data <- data.frame(Sleep_Hours, Exercise_Hours, thickness)\n    \n    A <- data$Sleep_Hours\n    B <- data$Exercise_Hours\n    Z <- data$thickness\n    \n    f$design <- design\n    f$data <- data\n    f$result <- aov(Z ~ A*B)\n  })\n  \n# Function to generate summary without creating plots\n  generate_summary <- reactive({\n  # Ensure at least 2 health dimensions are selected\n  if (length(input$phys) < 2) {\n    print(\"Please select at least 2 subfactors for analysis.\")\n    return(NULL)\n  }\n  \n    factorCalc()\n    data <- f$data\n    \n    A <- data$Sleep_Hours\n    B <- data$Exercise_Hours\n    Z <- data$thickness\n    \n#TODO: Change plot_type to better fit input :)\n  # Determine plot type based on selected items in input$phys\n  selected_dimensions <- sort(input$phys)[1:2]  # Use first 2 selected dimensions\n  plot_type <- paste(tolower(selected_dimensions), collapse = \"_\")\n  \n    if (plot_type == \"sleep_exercise\" | plot_type == \"exercise_sleep\") {\n      # Calculate means and standard deviations without plotting\n      means <- tapply(Z, list(A, B), mean)\n      sd <- tapply(Z, list(A, B), sd)\n      \n      # Extract specific scenarios for the summary\n      mod_insuf <- means[\"Insufficient\", \"Moderate\"]\n      int_suf <- means[\"Sufficient\", \"Intense\"]\n      \n      # Extract standard deviations for these scenarios\n      mod_insuf_sd <- sd[\"Insufficient\", \"Moderate\"]\n      int_suf_sd <- sd[\"Sufficient\", \"Intense\"]\n      \n      # Calculate differences and approximate percentage improvement\n      diff_health <- int_suf - mod_insuf\n      pct_improve <- (diff_health / mod_insuf) * 100\n      \n      # Standard deviation-based health improvement\n      diff_health_sd <- (int_suf - mod_insuf) / mod_insuf_sd\n      \n      f$std_dev <- round(diff_health_sd, 2)\n      f$health_value <- round(pct_improve, 1)\n      \n    } else if (plot_type == \"nutrition_sleep\" | plot_type == \"sleep_nutrition\") {\n      # Remove the interaction.plot call here\n      means <- tapply(Z, list(A, B), mean)\n      sd <- tapply(Z, list(A, B), sd)\n      \n      # Extract specific scenarios for the summary\n      mod_insuf <- means[\"Insufficient\", \"Moderate\"]\n      int_suf <- means[\"Sufficient\", \"Intense\"]\n      \n      # Extract standard deviations for these scenarios\n      mod_insuf_sd <- sd[\"Insufficient\", \"Moderate\"]\n      int_suf_sd <- sd[\"Sufficient\", \"Intense\"]\n      \n      # Calculate differences and approximate percentage improvement\n      diff_health <- int_suf - mod_insuf\n      pct_improve <- (diff_health / mod_insuf) * 100\n      \n      # Standard deviation-based health improvement\n      diff_health_sd <- (int_suf - mod_insuf) / mod_insuf_sd\n      \n      f$std_dev <- round(diff_health_sd, 2)\n      f$health_value <- round(pct_improve, 1)\n      \n    } else if (plot_type == \"exercise_nutrition\" | plot_type == \"nutrition_exercise\") {\n      # Remove the interaction.plot call here\n      means <- tapply(Z, list(A, B), mean)\n      sd <- tapply(Z, list(A, B), sd)\n      \n      # Extract specific scenarios for the summary\n      mod_insuf <- means[\"Insufficient\", \"Moderate\"]\n      int_suf <- means[\"Sufficient\", \"Intense\"]\n      \n      # Extract standard deviations for these scenarios\n      mod_insuf_sd <- sd[\"Insufficient\", \"Moderate\"]\n      int_suf_sd <- sd[\"Insufficient\", \"Intense\"]\n      \n      # Calculate differences and approximate percentage improvement\n      diff_health <- int_suf - mod_insuf\n      pct_improve <- (diff_health / mod_insuf) * 100\n      \n      # Standard deviation-based health improvement\n      diff_health_sd <- (int_suf - mod_insuf) / mod_insuf_sd\n      \n      f$std_dev <- round(diff_health_sd, 2)\n      f$health_value <- round(pct_improve, 1)\n      \n    } else {\n      showNotification(\"Invalid plot type. Please use a combination one of the following: 'sleep, exercise, and nutrition'.\")\n    }\n  \n  return(TRUE) # Return TRUE to indicate success\n})\n\n# Update the output renderers to handle the case when fewer than 2 dimensions are selected\n  output$sd <- renderText({\n  if (length(input$phys) < 2 || is.null(generate_summary())) {\n    return(\"N/A\")\n  }\n    return(f$std_dev)\n  })\n  \n  output$health_change <- renderText({\n  if (length(input$phys) < 2 || is.null(generate_summary())) {\n    return(\"N/A\")\n  }\n    return(paste0(f$health_value, \"%\"))\n  })\n  \n  output$interaction_plot <- renderPlot({\n  if (length(input$phys) < 2) {\n    # Display a message if fewer than 2 dimensions are selected\n    plot(0, 0, type = \"n\", axes = FALSE, ann = FALSE)\n    text(0, 0, \"Please select at least 2 subfactors under the Physical Health panel!\", cex = 1.5)\n    return()\n  }\n  \n    factorCalc()\n    df <- f$data\n    A <- df$Sleep_Hours\n    B <- df$Exercise_Hours\n    Z <- df$thickness\n    # Use the selected dimensions for plot labels\n    selected_dims <- sort(input$phys)[1:2]\n    interaction.plot(A, B, Z,\n                      xlab = \"Sleep Hours\",\n                      ylab = \"Overall Health Score\",\n                     trace.label = \"Exercise Hours\")\n  })\n  \n  output$factorial <- renderPlotly({\n    # Define the Factors and Levels\n    factors = 3\n    levels = c(0,1)\n    \n    # Create factorial design grid reducing time complexity from O(N^3) to O(1)\n    df <- expand.grid(\n      sleep = levels, \n      exercise = levels, \n      nutrition = levels\n    )\n    \n    # Add hovertext directly to the dataframe and factors\n    df$sleep_hovertext <- ifelse(df$sleep == 0, \"Low\", \"High\")\n    df$exercise_hovertext <- ifelse(df$exercise == 0, \"Low\", \"High\")\n    df$nutrition_hovertext <- ifelse(df$nutrition == 0, \"Low\", \"High\")\n    \n    # Initialize plot\n    plot <- plot_ly()\n    \n    # Define the edges of the cube as pairs of vertex indices\n    edges <- list(\n      # Bottom square\n      c(1,2), c(2,4), c(4,3), c(3,1),\n      # Top square\n      c(5,6), c(6,8), c(8,7), c(7,5),\n      # Vertical edges\n      c(1,5), c(2,6), c(3,7), c(4,8)\n    )\n    \n    # Define color scheme for factors\n    factor_colors <- list(\n      sleep = list(low = \"firebrick\", high = \"royalblue\"),\n      exercise = list(low = \"darkorange\", high = \"forestgreen\"),\n      nutrition = list(low = \"purple\", high = \"turquoise\")\n    )\n    \n    # Function to determine which factor changes along an edge\n    determine_changing_factor <- function(df, edge_indices) {\n      v1 <- df[edge_indices[1], ]\n      v2 <- df[edge_indices[2], ]\n      \n      if (v1$sleep != v2$sleep) return(\"sleep\")\n      if (v1$exercise != v2$exercise) return(\"exercise\")\n      if (v1$nutrition != v2$nutrition) return(\"nutrition\")\n      return(\"none\")  # No change (shouldn't happen in a proper cube)\n    }\n    \n    # Function to generate edge label based on which factor changes\n    generate_edge_label <- function(df, edge_indices, factor) {\n      v1 <- df[edge_indices[1], ]\n      v2 <- df[edge_indices[2], ]\n      \n      # Determine direction of change\n      if (factor == \"sleep\") {\n        from_val <- v1$sleep_hovertext\n        to_val <- v2$sleep_hovertext\n      } else if (factor == \"exercise\") {\n        from_val <- v1$exercise_hovertext\n        to_val <- v2$exercise_hovertext\n      } else if (factor == \"nutrition\") {\n        from_val <- v1$nutrition_hovertext\n        to_val <- v2$nutrition_hovertext\n      } else {\n        return(\"Edge\")  # Fallback, shouldn't happen\n      }\n      \n      # Create label with factor name and direction\n      return(paste0(toupper(substr(factor, 1, 1)), substr(factor, 2, nchar(factor)), \": \", from_val, \" → \", to_val))\n    }\n    \n    # Function to get edge color based on factor and values\n    get_edge_color <- function(df, edge_indices, factor) {\n      v1 <- df[edge_indices[1], ]\n      v2 <- df[edge_indices[2], ]\n      \n      # For demonstration we'll use the \"to\" value to determine color\n      if (factor == \"sleep\") {\n        return(ifelse(v2$sleep == 0, factor_colors$sleep$low, factor_colors$sleep$high))\n      } else if (factor == \"exercise\") {\n        return(ifelse(v2$exercise == 0, factor_colors$exercise$low, factor_colors$exercise$high))\n      } else if (factor == \"nutrition\") {\n        return(ifelse(v2$nutrition == 0, factor_colors$nutrition$low, factor_colors$nutrition$high))\n      }\n      return(\"black\")  # Fallback\n    }\n    \n    # Draw all the edges on plotly with colors and labels\n    for (i in 1:length(edges)) {\n      edge <- edges[[i]]\n      \n      # Determine what factor changes along this edge\n      changing_factor <- determine_changing_factor(df, edge)\n      \n      # Generate edge label\n      edge_label <- generate_edge_label(df, edge, changing_factor)\n      \n      # Get edge color\n      edge_color <- get_edge_color(df, edge, changing_factor)\n      \n      plot <- plot %>% add_trace(\n        x = df$sleep[edge],\n        y = df$exercise[edge],\n        z = df$nutrition[edge],\n        type = 'scatter3d',\n        mode = 'lines',\n        name = edge_label,\n        line = list(color = edge_color, width = 6),\n        hoverinfo = 'skip',  # Show the edge label on hover\n        showlegend = TRUE    # Add to legend\n      )\n    }\n    \n    # Add all the points on plotly (vertices)\n    plot <- plot %>% add_trace(\n      x = df$sleep, \n      y = df$exercise, \n      z = df$nutrition, \n      type = 'scatter3d', \n      mode = 'markers', \n      name = \"Factor Points\",\n      marker = list(\n        size = 8,\n        color = \"black\",\n        symbol = \"circle\"\n      ),\n      hovertemplate = paste(\n        \"Sleep:\",\n        df$sleep_hovertext,\n        \"<br>\",\n        \"Exercise:\",\n        df$exercise_hovertext,\n        \"<br>\",\n        \"Nutrition:\",\n        df$nutrition_hovertext,\n        # Extra removes to the trace number\n        \"<extra><\/extra>\"\n      )\n    )\n    \n    # Add legends for factor levels\n    for (factor in c(\"sleep\", \"exercise\", \"nutrition\")) {\n      # Add hidden traces just for legend entries\n      plot <- plot %>% add_trace(\n        x = c(NULL), y = c(NULL), z = c(NULL),\n        type = 'scatter3d',\n        mode = 'lines',\n        line = list(color = factor_colors[[factor]]$low, width = 6),\n        name = paste0(toupper(substr(factor, 1, 1)), substr(factor, 2, nchar(factor)), \": Low\"),\n        hoverinfo = 'none'\n      )\n      \n      plot <- plot %>% add_trace(\n        x = c(NULL), y = c(NULL), z = c(NULL),\n        type = 'scatter3d',\n        mode = 'lines',\n        line = list(color = factor_colors[[factor]]$high, width = 6),\n        name = paste0(toupper(substr(factor, 1, 1)), substr(factor, 2, nchar(factor)), \": High\"),\n        hoverinfo = 'none'\n      )\n    }\n    \n    # Layout configuration\n    plot <- plot %>% layout(\n      scene = list(\n        xaxis = list(title = 'Sleep', range = c(-0.2, 1.2)),\n        yaxis = list(title = 'Exercise', range = c(-0.2, 1.2)),\n        zaxis = list(title = 'Nutrition', range = c(-0.2, 1.2))\n      ),\n      title = \"3D Representation of a 2^k Factorial Design\",\n      legend = list(\n        title = list(text = \"Factors and Levels\"),\n        orientation = \"h\",\n        yanchor = \"bottom\",\n        y = -0.2\n      )\n    )\n  })\n  output$anova <- renderTable({\n    factorCalc()\n    anova(f$result)\n  })\n  \n  output$design <- renderUI({\n    factorCalc()\n    data <- as.data.frame(f$design)\n    HTML(\n      kable(data, row.names = T)  |>\n        kable_styling('striped',fixed_thead = T, full_width = F) |>\n        column_spec(2,color= 'white',\n                    background = spec_color(data$Nutrition,end = 0.7, option = 'A' )) |>\n        column_spec(3,color= 'white',\n                    background = spec_color(data$Sleep,end = 0.7, option = 'A' )) |>\n        scroll_box(data, height = '400px')\n    )\n\n  })\n  \n  \n}\n\n# Run the application \nshinyApp(ui,server)","type":"text"},{"name":"R/2k Factor Design.Rmd","content":"---\ntitle: \"2k Factorial\"\nauthor: \"Rachel Hart\"\ndate: \"`r Sys.Date()`\"\noutput: html_document\n---\n```{r, echo = FALSE}\nlibrary(designr)\nlibrary(AlgDesign)\nlibrary(tidyverse)\nlibrary(ggplot2)\nlibrary(plotly)\nlibrary(knitr)\nlibrary(kableExtra)\nlibrary(plot3D)\n```\n\n```{r}\nlibrary(designr)\ndesign1 <- \n  fixed.factor(\"Sleep\", levels=c(\"Low\", \"High\")) +\n  fixed.factor(\"Exercise\",  levels=c(\"Under 30 Minutes\", \"Over 30 Minutes\")) +\n  fixed.factor(\"Spirituality\", levels =c(\"Under 20 minutes\", \"Over 20 Minutes\")) +\n  fixed.factor(\"Engagement\", levels =c(\"Under 20 minutes\", \"Over 20 Minutes\")) +\n  fixed.factor(\"Nutrition\", levels =c(\"Low\", \"High\")) +\n  fixed.factor(\"Cognition\", levels =c(\"Low\", \"High\")) \ndesign1\n\n# Add more factors\n# Make them dynamic based on a variable predetermined before (relate it to the menu and shiny and user input)\n## Use paste to create the levels\n```\n\n```{r}\n# Full factorial design\nlibrary(AlgDesign)\n\n# Create a vector of the number of levels for each factor\nlevels <- c(2, 2, 2, 2, 2, 2)\n\n# Generate the full factorial design\ndesign <- gen.factorial(levels, nVars = 3)\ndesign\n```\n\n```{r}\n#Create a vector column for thickness \nhealth<-c(rnorm(15, 4.5, 2.5), rnorm(15, 3.5, 2.5), rnorm(15, 5.5, 2.5), rnorm(15, 2.5, 2.5))\n\n#Create the factors \nsleep <- c(rep(\"5\",15), \n\t\t\t\t\t\trep(\"9\",15), \n\t\t\t\t\t\trep(\"9\",15), \n\t\t\t\t\t\trep(\"5\",15)) \n\nexercise <- c(rep(\"60\",15), \n\t\t\t\t\trep(\"30\",15), \n\t\t\t\t\trep(\"60\",15), \n\t\t\t\t\trep(\"30\",15)) \n\n#Merge the data into a dataset 'data' \ndata<- data.frame(sleep, \n\t\t\t\texercise, \n\t\t\t\thealth) \ndata\n\n#Assign the factors into variables \nA = data$sleep \nB = data$exercise \nZ = data$health \n\nresult <-aov(Z ~ A*B) \n\n#Plot the anova table \nanova(result) \n\n#Plot the interaction plot \ninteraction.plot(A, B, Z, \n\t\t\t\txlab = \"Sleep\", \n\t\t\t\tylab = \"Health\") \n\n```\n# 3 Factor Simulated Interaction Plots\n```{r}\nhealth<-c(rnorm(15, 2.5, 1.5), rnorm(15, 3.5, 1.5), rnorm(15, 3.5, 1.5), rnorm(15, 4.5, 1.5), \n          rnorm(15, 3.5, 1.5), rnorm(15, 4.5, 1.5), rnorm(15, 4.5, 1.5), rnorm(15, 5.5, 1.5))\n\n#Create the factors \nsleep <- c(rep(\"Insufficient\",15), \n\t\t\t\t\t\trep(\"Sufficient\",15), \n\t\t\t\t\t\trep(\"Insufficient\",15), \n\t\t\t\t\t\trep(\"Sufficient\",15),\n            rep(\"Insufficient\",15), \n\t\t\t\t\t\trep(\"Sufficient\",15), \n\t\t\t\t\t\trep(\"Insufficient\",15), \n\t\t\t\t\t\trep(\"Sufficient\",15))\n\nexercise <- c(rep(\"Moderate\",15), \n\t\t\t\t\t    rep(\"Moderate\",15), \n\t\t\t\t\t    rep(\"Intense\",15), \n\t\t\t\t\t    rep(\"Intense\",15),\n\t\t\t\t\t    rep(\"Moderate\",15), \n\t\t\t\t\t\t  rep(\"Moderate\",15), \n\t\t\t\t\t\t  rep(\"Intense\",15), \n\t\t\t\t\t\t  rep(\"Intense\",15)) \n\nnutrition <- c(rep(\"Mindless\",15), \n\t\t\t\t\t  rep(\"Mindless\",15), \n\t\t\t\t\t  rep(\"Mindless\",15), \n\t\t\t\t\t  rep(\"Mindless\",15),\n\t\t\t\t\t  rep(\"Purposeful\",15), \n\t\t\t\t\t\trep(\"Purposeful\",15), \n\t\t\t\t\t\trep(\"Purposeful\",15), \n\t\t\t\t\t\trep(\"Purposeful\",15))\n\n#Merge the data into a dataset 'data' \ndata <- data.frame(sleep, exercise, nutrition, health) \ndata\n\n#Assign the factors into variables \nA = data$sleep \nB = data$exercise \nC = data$nutrition\nZ = data$health\n\n```\n\n\n```{r}\n# Function to generate summary based on interaction plot choice\ngenerate_summary <- function(plot_type, data) {\n  \n  if (plot_type == \"sleep_exercise\" | plot_type == \"exercise_sleep\") {\n    interaction.plot(A, B, Z,  \n                     xlab = \"Sleep\", \n                     ylab = \"Health\", trace.label = \"Exercise\")\n    \n    means <- tapply(data$health, list(data$sleep, data$exercise), mean)\n    sd <- tapply(data$health, list(data$sleep, data$exercise), sd)\n    \n    # Extract specific scenarios for the summary\n    mod_insuf <- means[\"Insufficient\", \"Moderate\"]\n    mod_suf <- means[\"Sufficient\", \"Moderate\"]\n    int_suf <- means[\"Sufficient\", \"Intense\"]\n    \n    # Extract standard deviations for these scenarios\n    mod_insuf_sd <- sd[\"Insufficient\", \"Moderate\"]\n    mod_suf_sd <- sd[\"Sufficient\", \"Moderate\"]\n    int_suf_sd <- sd[\"Sufficient\", \"Intense\"]\n    \n    # Calculate differences and approximate percentage improvement\n    diff_health <- int_suf - mod_insuf\n    pct_improve <- (diff_health / mod_insuf) * 100\n    \n    # Standard deviation-based health improvement\n    diff_health_sd <- (int_suf - mod_insuf) / mod_insuf_sd\n    \n    cat(\"In this simulation, going from moderate exercise with insufficient sleep (mean health =\", \n        round(mod_insuf, 2), \", SD =\", round(mod_insuf_sd, 2), \") to intense exercise with sufficient sleep (mean health =\", \n        round(int_suf, 2), \", SD =\", round(int_suf_sd, 2), \") increases your health score by an average of\", \n        round(diff_health, 2), \"units, corresponding to an approximate\", \n        round(pct_improve, 1), \"% health improvement and\", \n        round(diff_health_sd, 2), \"standard deviation(s).\\n\")\n    \n  } else if (plot_type == \"nutrition_sleep\" | plot_type == \"sleep_nutrition\") {\n    interaction.plot(C, A, Z,  \n                     xlab = \"Nutrition\", \n                     ylab = \"Health\", trace.label = \"Sleep\")\n    \n    means <- tapply(data$health, list(data$nutrition, data$sleep), mean)\n    sd <- tapply(data$health, list(data$nutrition, data$sleep), sd)\n    \n    # Extract specific scenarios for the summary\n    mod_insuf_nut <- means[\"Mindless\", \"Insufficient\"]\n    mod_suf_nut <- means[\"Mindless\", \"Sufficient\"]\n    int_suf_nut <- means[\"Purposeful\", \"Sufficient\"]\n    \n    # Extract standard deviations for these scenarios\n    mod_insuf_nut_sd <- sd[\"Mindless\", \"Insufficient\"]\n    mod_suf_nut_sd <- sd[\"Mindless\", \"Sufficient\"]\n    int_suf_nut_sd <- sd[\"Purposeful\", \"Sufficient\"]\n    \n    # Calculate differences and approximate percentage improvement\n    diff_health <- int_suf_nut - mod_insuf_nut\n    pct_improve <- (diff_health / mod_insuf_nut) * 100\n    \n    # Standard deviation-based health improvement\n    diff_health_sd <- (int_suf_nut - mod_insuf_nut) / mod_insuf_nut_sd\n    \n    cat(\"In this simulation, going from mindless nutrition with insufficient sleep (mean health =\", \n        round(mod_insuf_nut, 2), \", SD =\", round(mod_insuf_nut_sd, 2), \") to purposeful nutrition with sufficient sleep (mean health =\", \n        round(int_suf_nut, 2), \", SD =\", round(int_suf_nut_sd, 2), \") increases your health score by an average of\", \n        round(diff_health, 2), \"units, corresponding to an approximate\", \n        round(pct_improve, 1), \"% health improvement and\", \n        round(diff_health_sd, 2), \"standard deviation(s).\\n\")\n    \n  } else if (plot_type == \"exercise_nutrition\" | plot_type == \"nutrition_exercise\") {\n    interaction.plot(B, C, Z,  \n                     xlab = \"Exercise\", \n                     ylab = \"Health\", trace.label = \"Nutrition\")\n    \n    means <- tapply(data$health, list(data$exercise, data$nutrition), mean)\n    sd <- tapply(data$health, list(data$exercise, data$nutrition), sd)\n    \n    # Extract specific scenarios for the summary\n    mod_insuf_mind <- means[\"Moderate\", \"Mindless\"]\n    mod_suf_mind <- means[\"Moderate\", \"Purposeful\"]\n    int_suf_purp <- means[\"Intense\", \"Purposeful\"]\n    \n    # Extract standard deviations for these scenarios\n    mod_insuf_mind_sd <- sd[\"Moderate\", \"Mindless\"]\n    mod_suf_mind_sd <- sd[\"Moderate\", \"Purposeful\"]\n    int_suf_purp_sd <- sd[\"Intense\", \"Purposeful\"]\n    \n    # Calculate differences and approximate percentage improvement\n    diff_health <- int_suf_purp - mod_insuf_mind\n    pct_improve <- (diff_health / mod_insuf_mind) * 100\n    \n    # Standard deviation-based health improvement\n    diff_health_sd <- (int_suf_purp - mod_insuf_mind) / mod_insuf_mind_sd\n    \n    cat(\"In this simulation, going from moderate exercise with mindless nutrition (mean health =\", \n        round(mod_insuf_mind, 2), \", SD =\", round(mod_insuf_mind_sd, 2), \") to intense exercise with purposeful nutrition (mean health =\", \n        round(int_suf_purp, 2), \", SD =\", round(int_suf_purp_sd, 2), \") increases your health score by an average of\", \n        round(diff_health, 2), \"units, corresponding to an approximate\", \n        round(pct_improve, 1), \"% health improvement and\", \n        round(diff_health_sd, 2), \"standard deviation(s).\\n\")\n    \n  } else {\n    cat(\"Invalid plot type. Please use a combination one of the following: 'sleep, exercise, and nutrition'.\\n\")\n  }\n}\n\ngenerate_summary(\"nutrition_sleep\", data)\n```\n\n\n# Making Models\n```{r}\nresult <-aov(Z ~ A*B) \nresult2 <-aov(Z ~ B*C)\nresult3 <- aov(Z ~ A*C)\nresult4 <- aov(Z ~ A*B*C)\n\nresult\nresult2 \nresult3 \nresult4\n\n\nlinear <-lm(Z ~ A*B*C)\nlinear\n```\n\n\n### Two Factor Two Levels\n```{r}\nfactors = 2\nlevels = c(-1,1)\nx1 = c()\nx2 = c()\n\nfor (j in 1:length(levels)) {\n    for (i in 1:length(levels)) {\n    x1 = c(x1, levels[i])\n    x2 = c(x2, levels[j])\n  }\n}\n\ntwodf = data.frame(row.names =  c(1:length(x1)), x1,x2)\n\nkable(twodf, row.names = T)  |>\n  kable_styling('striped',fixed_thead = T, full_width = F) |>\n\n  column_spec(2,color= 'white',\n              background = spec_color(twodf$x1,end = 0.7, option = 'A' )) |>\n  column_spec(3,color= 'white',\n              background = spec_color(twodf$x2 ,end = 0.7, option = 'A' ))\n\nplot_ly(twodf, x = ~x1, y = ~x2) \n```\n\n### Three Factors Two Levels\n```{r}\nfactors = 3\nlevels = c(0,1)\nsleep = c()\nexercise = c()\nnutrition = c()\n\nfor (k in 1:length(levels))\n  for (j in 1:length(levels)) {\n      for (i in 1:length(levels)) {\n      sleep = c(sleep, levels[i])\n      exercise = c(exercise, levels[j])\n      nutrition = c(nutrition, levels[k])\n    }\n  }\n\nthreedf = data.frame(row.names = c(1:length(sleep)), sleep,exercise, nutrition)\n\nkable(threedf, row.names = T)  |>\n  kable_styling('striped',fixed_thead = T, full_width = F) |>\n    column_spec(2,color= 'white',\n              background = spec_color(threedf$sleep,end = 0.7, option = 'A' )) |>\n    column_spec(3,color= 'white',\n              background = spec_color(threedf$exercise ,end = 0.7, option = 'A' )) |>\n    column_spec(4,color= 'white',\n              background = spec_color(threedf$nutrition ,end = 0.7, option = 'A' )) |>\n    scroll_box(threedf, height = '400px')\n```\n\n```{r}\nplot_ly(threedf, x = ~sleep, y = ~exercise, z = ~nutrition) %>%\n  add_trace(text = c(\"Sleep: Low, Exercise: Low, Nutrition: Low\", \"Sleep: High, Exercise: Low, Nutrition: Low\", \"Sleep: Low, Exercise: High, Nutrition: Low\", \"Sleep: High, Exercise: High, Nutrition: Low\", \"Sleep: Low, Exercise: Low, Nutrition: High\", \"Sleep: High, Exercise: Low, Nutrition: High\", \"Sleep: Low, Exercise: High, Nutrition: High\", \"Sleep: High, Exercise: High, Nutrition: High\")) \n\n\n\n# Make cube have edges and thicker dot\n# Rename axis to have exercise high, nutrition high etc..\n```\n\n\n## Surface Plot\n\n```{r}\nvertices <- data.frame(\n  x = c(0, 1, 1, 0, 0, 1, 1, 0), y = c(0, 0, 1, 1, 0, 0, 1, 1), z = c(0, 0, 0, 0, 1, 1, 1, 1))\n\nedges <- list(c(1,2), c(2,3), c(3,4), c(4,1), c(5,6), c(6,7), c(7,8), c(8,5), c(1,5), c(2,6), c(3,7), c(4,8))\n\np <- plot_ly(threedf, x = ~sleep, y = ~exercise, z = ~nutrition)\n\nfor(edge in edges) {\n\n  p <- add_trace(p,\n\n                 x = vertices$x[edge],\n\n                 y = vertices$y[edge],\n\n                 z = vertices$z[edge],\n\n                 type = \"scatter3d\",\n\n                 mode = \"lines\",\n\n                 line = list(width = 4, color = \"#1f77b4\")\n\n  )\n\n}\n\np <- add_trace(p,\n\n               x = vertices$x,\n\n               y = vertices$y,\n\n               z = vertices$z,\n\n               type = \"scatter3d\",\n\n               mode = \"markers\",\n\n               marker = list(size = 5, color = \"#ff7f0e\")\n\n)\n\np <- add_trace(p, text = c(\"Sleep: Low, Exercise: Low, Nutrition: Low\", \"Sleep: High, Exercise: Low, Nutrition: Low\", \"Sleep: Low, Exercise: High, Nutrition: Low\", \"Sleep: High, Exercise: High, Nutrition: Low\", \"Sleep: Low, Exercise: Low, Nutrition: High\", \"Sleep: High, Exercise: Low, Nutrition: High\", \"Sleep: Low, Exercise: High, Nutrition: High\", \"Sleep: High, Exercise: High, Nutrition: High\")) \n\np <- layout(p,\n\n            scene = list(\n\n              xaxis = list(title = \"Sleep\", range = c(0, 1)),\n\n              yaxis = list(title = \"Exercise\", range = c(0, 1)),\n\n              zaxis = list(title = \"Nutrition\", range = c(0, 1)),\n\n              aspectmode = \"cube\"  # ensures equal aspect ratio\n\n            ),\n\n            title = \"2^3 Factorial Design Plot\",\n            showlegend = FALSE\n\n)\n\np\n\n```\n\n```{r}\nfactors = 6\nlevels = c(0,1)\nsleep = c()\nexercise = c()\nnutrition = c()\nspirituality = c()\ncommunity = c()\nmental = c()\n\nfor (k in 1:length(levels))\n  for (j in 1:length(levels)) {\n      for (i in 1:length(levels)) {\n        for(l in 1:length(levels)){\n          for(m in 1:length(levels)) {\n            for(n in 1:length(levels)){\n      sleep = c(sleep, levels[i])\n      exercise = c(exercise, levels[j])\n      nutrition = c(nutrition, levels[k])\n      spirituality = c(spirituality, levels[l])\n      community = c(community, levels[m])\n      mental = c(mental, levels[n])\n            }\n          }\n        }\n    }\n  }\n\nsixdf = data.frame(row.names = c(1:length(sleep)), sleep,exercise, nutrition, spirituality, community, mental)\n\nkable(sixdf, row.names = T)  |>\n  kable_styling('striped',fixed_thead = T, full_width = F) |>\n    column_spec(2,color= 'white',\n              background = spec_color(sixdf$sleep,end = 0.7, option = 'A' )) |>\n    column_spec(3,color= 'white',\n              background = spec_color(sixdf$exercise,end = 0.7, option = 'A' )) |>\n    column_spec(4,color= 'white',\n              background = spec_color(sixdf$nutrition,end = 0.7, option = 'A' )) |>\n    column_spec(5,color= 'white',\n              background = spec_color(sixdf$spirituality,end = 0.7, option = 'A' )) |>\n    column_spec(6,color= 'white',\n              background = spec_color(sixdf$community ,end = 0.7, option = 'A' )) |>\n    column_spec(7,color= 'white',\n              background = spec_color(sixdf$mental ,end = 0.7, option = 'A' )) |>\n    scroll_box(sixdf, height = '400px')\n```\n\n```{r}\n\n```\n\n","type":"text"},{"name":"test.R","content":"# Function to generate summary without creating plots\ngenerate_summary <- reactive({\n  # Ensure at least 2 health dimensions are selected\n  if (length(input$phys) < 2) {\n    showNotification(\"Please select at least 2 health dimensions for analysis.\", type = \"warning\")\n    return(NULL)\n  }\n  \n  factorCalc()\n  data <- f$data\n  \n  A <- data$Sleep_Hours\n  B <- data$Exercise_Hours\n  Z <- data$thickness\n  \n  # Determine plot type based on selected items in input$phys\n  selected_dimensions <- sort(input$phys)[1:2]  # Use first 2 selected dimensions\n  plot_type <- paste(tolower(selected_dimensions), collapse = \"_\")\n  \n  if (plot_type == \"sleep_exercise\" | plot_type == \"exercise_sleep\") {\n    # Calculate means and standard deviations without plotting\n    means <- tapply(Z, list(A, B), mean)\n    sd <- tapply(Z, list(A, B), sd)\n    \n    # Extract specific scenarios for the summary\n    mod_insuf <- means[\"Insufficient\", \"Moderate\"]\n    int_suf <- means[\"Sufficient\", \"Intense\"]\n    \n    # Extract standard deviations for these scenarios\n    mod_insuf_sd <- sd[\"Insufficient\", \"Moderate\"]\n    int_suf_sd <- sd[\"Sufficient\", \"Intense\"]\n    \n    # Calculate differences and approximate percentage improvement\n    diff_health <- int_suf - mod_insuf\n    pct_improve <- (diff_health / mod_insuf) * 100\n    \n    # Standard deviation-based health improvement\n    diff_health_sd <- (int_suf - mod_insuf) / mod_insuf_sd\n    \n    f$std_dev <- round(diff_health_sd, 2)\n    f$health_value <- round(pct_improve, 1)\n    \n  } else if (plot_type == \"nutrition_sleep\" | plot_type == \"sleep_nutrition\") {\n    # Remove the interaction.plot call here\n    means <- tapply(Z, list(A, B), mean)\n    sd <- tapply(Z, list(A, B), sd)\n    \n    # Extract specific scenarios for the summary\n    mod_insuf <- means[\"Insufficient\", \"Moderate\"]\n    int_suf <- means[\"Sufficient\", \"Intense\"]\n    \n    # Extract standard deviations for these scenarios\n    mod_insuf_sd <- sd[\"Insufficient\", \"Moderate\"]\n    int_suf_sd <- sd[\"Sufficient\", \"Intense\"]\n    \n    # Calculate differences and approximate percentage improvement\n    diff_health <- int_suf - mod_insuf\n    pct_improve <- (diff_health / mod_insuf) * 100\n    \n    # Standard deviation-based health improvement\n    diff_health_sd <- (int_suf - mod_insuf) / mod_insuf_sd\n    \n    f$std_dev <- round(diff_health_sd, 2)\n    f$health_value <- round(pct_improve, 1)\n    \n  } else if (plot_type == \"exercise_nutrition\" | plot_type == \"nutrition_exercise\") {\n    # Remove the interaction.plot call here\n    means <- tapply(Z, list(A, B), mean)\n    sd <- tapply(Z, list(A, B), sd)\n    \n    # Extract specific scenarios for the summary\n    mod_insuf <- means[\"Insufficient\", \"Moderate\"]\n    int_suf <- means[\"Sufficient\", \"Intense\"]\n    \n    # Extract standard deviations for these scenarios\n    mod_insuf_sd <- sd[\"Insufficient\", \"Moderate\"]\n    int_suf_sd <- sd[\"Insufficient\", \"Intense\"]\n    \n    # Calculate differences and approximate percentage improvement\n    diff_health <- int_suf - mod_insuf\n    pct_improve <- (diff_health / mod_insuf) * 100\n    \n    # Standard deviation-based health improvement\n    diff_health_sd <- (int_suf - mod_insuf) / mod_insuf_sd\n    \n    f$std_dev <- round(diff_health_sd, 2)\n    f$health_value <- round(pct_improve, 1)\n    \n  } else {\n    # Default case for any other combination\n    means <- tapply(Z, list(A, B), mean)\n    sd <- tapply(Z, list(A, B), sd)\n    \n    # Extract specific scenarios for the summary\n    mod_insuf <- means[\"Insufficient\", \"Moderate\"]\n    int_suf <- means[\"Sufficient\", \"Intense\"]\n    \n    # Extract standard deviations for these scenarios\n    mod_insuf_sd <- sd[\"Insufficient\", \"Moderate\"]\n    int_suf_sd <- sd[\"Sufficient\", \"Intense\"]\n    \n    # Calculate differences and approximate percentage improvement\n    diff_health <- int_suf - mod_insuf\n    pct_improve <- (diff_health / mod_insuf) * 100\n    \n    # Standard deviation-based health improvement\n    diff_health_sd <- (int_suf - mod_insuf) / mod_insuf_sd\n    \n    f$std_dev <- round(diff_health_sd, 2)\n    f$health_value <- round(pct_improve, 1)\n  }\n  \n  return(TRUE) # Return TRUE to indicate success\n})\n\n# Update the output renderers to handle the case when fewer than 2 dimensions are selected\noutput$sd <- renderText({\n  if (length(input$phys) < 2 || is.null(generate_summary())) {\n    return(\"N/A\")\n  }\n  return(f$std_dev)\n})\n\noutput$health_change <- renderText({\n  if (length(input$phys) < 2 || is.null(generate_summary())) {\n    return(\"N/A\")\n  }\n  return(paste0(f$health_value, \"%\"))\n})\n\noutput$interaction_plot <- renderPlot({\n  if (length(input$phys) < 2) {\n    # Display a message if fewer than 2 dimensions are selected\n    plot(0, 0, type = \"n\", axes = FALSE, ann = FALSE)\n    text(0, 0, \"Please select at least 2 health dimensions\", cex = 1.5)\n    return()\n  }\n  \n  factorCalc()\n  df <- f$data\n  A <- df$Sleep_Hours\n  B <- df$Exercise_Hours\n  Z <- df$thickness\n  \n  # Use the selected dimensions for plot labels\n  selected_dims <- sort(input$phys)[1:2]\n  \n  interaction.plot(A, B, Z,\n                   xlab = selected_dims[1],\n                   ylab = \"Overall Health Score\",\n                   trace.label = selected_dims[2])\n})","type":"text"}]
