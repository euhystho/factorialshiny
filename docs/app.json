[{"name":"app.R","content":"#\n# This is a Shiny web application. You can run the application by clicking\n# the 'Run App' button above.\n#\n\n# Shiny-related UI libraries\nlibrary(shiny)\nlibrary(shinyjs)\nlibrary(shinyWidgets)\nlibrary(bslib)\nlibrary(bsicons)\nlibrary(paletteer)\n\n#Plot related libraries\nlibrary(plotly)\nlibrary(kableExtra)\nlibrary(tidyverse)\nlibrary(dae)\n\n#Factorial Design related libraries\nlibrary(AlgDesign)\nlibrary(DoE.base)\nlibrary(daewr)\noptions(shiny.reactlog=TRUE) \n\n\n# Define UI for application\nui <- page_sidebar(\n  useShinyjs(),\n  #TODO: Application Bootswatch Theme\n  theme = bs_theme(bootswatch = \"journal\"),\n  # Application title\n  title = \"Effects of Self-Efficacy on Post-Menopausal Women's Health\",\n  window_title = \"2^k Factorial Design of Healthy Habits Circle Simulations\",\n  \n  tags$head(\n    tags$link(rel = \"stylesheet\", type = \"text/css\", href = \"styles.css\")\n  ),\n  # Mobile Friendly:\n  fillable_mobile = TRUE,\n  mobileDetect('isMobile'),\n  \n  # Sidebar with a slider input for number of bins\n  sidebar = sidebar(\n    title = \"Health Dimensions\",\n    width = 300,\n    fillable = TRUE,\n    selectInput(\n      inputId = \"person\",\n      label = \"Select one of the individuals:\",\n      choices = unique(individuals$name),\n      selected = unique(individuals$name)[1]\n    ),\n    checkboxGroupButtons(\n      \"factors\",\n      \"Select the following subfactors:\",\n      choices = c(\"Nutrition\", \"Sleep\", \"Exercise\", \"Spirituality\", \"Socialization\", \"Wellbeing\"),\n      selected = c(\"Nutrition\",\"Sleep\"),\n      justified = TRUE,\n      size = 'sm',\n    ),\n    accordion_filters <- accordion(\n      id = \"dims\",\n      accordion_panel(\n        \"Participant Biography\",\n        icon = bs_icon(\"file-person-fill\"),\n        uiOutput(\"bio\")\n      ),\n      accordion_panel(\n        \"Physical Health\",\n        icon = bs_icon(\"heart-pulse-fill\"),\n        checkboxGroupButtons(\n          \"phys\",\n          \"Select the following subfactors:\",\n          choices = c(\"Nutrition\", \"Sleep\", \"Exercise\"),\n          selected = c(\"Nutrition\",\"Sleep\"),\n          size = 'sm',\n        ),\n        conditionalPanel(\n          condition = \"input.phys.includes('Nutrition')\",\n          card(\n            card_header(\"Nutrition\"),\n            sliderTextInput(\n              \"calorie_slider\",\n              \"Caloric Intake:\",\n              grid = TRUE,\n              force_edges = TRUE,\n              choices = c(\"Below Target\", \"At Target\", \"Above Target\")\n            ),\n            sliderTextInput(\n              \"protein_slider\",\n              \"Protein Intake:\",\n              grid = TRUE,\n              force_edges = TRUE,\n              choices = c(\"Below Target\", \"At Target\", \"Above Target\")\n            ),\n            sliderTextInput(\n              \"fat_slider\",\n              \"Fat Intake:\",\n              grid = TRUE,\n              force_edges = TRUE,\n              choices = c(\"Below Target\", \"At Target\", \"Above Target\")\n            ),\n            sliderTextInput(\n              \"carb_slider\",\n              \"Carbohydrate Intake:\",\n              grid = TRUE,\n              force_edges = TRUE,\n              choices = c(\"Below Target\", \"At Target\", \"Above Target\")\n            ),\n            sliderTextInput(\n              \"fasting_slider\",\n              \"Choose the type of fasting:\",\n              grid = TRUE,\n              force_edges = TRUE,\n              choices = c(\"Dry\", \"Water\", \"Intermittent\")\n            ),\n            sliderTextInput(\n              \"other_nutr_slider\",\n              \"Choose how much of any other nutritional factor:\",\n              grid = TRUE,\n              force_edges = TRUE,\n              choices = c(\"Below Target\", \"At Target\", \"Above Target\")\n            ),\n          )\n        ),\n        conditionalPanel(\n          condition = \"input.phys.includes('Sleep')\",\n          card(\n            card_header(\"Sleep\"),\n            sliderInput(\n              \"sleep_quan_slider\",\n              \"Choose how many hours of Sleep:\",\n              min = 0,\n              max = 10,\n              value = c(6, 9)\n            ),\n            sliderTextInput(\n              \"sleep_qual_slider\",\n              \"Choose the quality of Sleep:\",\n              grid = TRUE,\n              force_edges = TRUE,\n              choices = c(\"Poor\", \"Good\", \"Excellent\")\n            ),\n            sliderInput(\n              \"sleep_eat_slider\",\n              \"Choose how many hours since eating before bed:\",\n              min = 0,\n              max = 8,\n              value = 3,\n            ),\n            sliderInput(\n              \"screentime_slider\",\n              \"Choose how much screentime before bed:\",\n              min = 0,\n              max = 5,\n              value = 3,\n            ),\n            sliderInput(\n              \"melatonin_slider\",\n              \"Choose how many mgs of Melatonin are taken before bed:\",\n              min = 0,\n              max = 10,\n              value = 0,\n            ),\n          ),\n          # Added missing comma here\n        ),\n        conditionalPanel(\n          condition = \"input.phys.includes('Exercise')\",\n          card(\n            card_header(\"Exercise\"),\n            sliderTextInput(\n              \"swim_slider\",\n              \"Choose the intensity of Swimming:\",\n              grid = TRUE,\n              force_edges = TRUE,\n              choices = c(\"None\",\"Light\", \"Intense\")\n            ),\n            sliderTextInput(\n              \"run_slider\",\n              \"Choose the intensity of Running:\",\n              grid = TRUE,\n              force_edges = TRUE,\n              choices = c(\"None\",\"Light\", \"Intense\")\n            ),\n            sliderTextInput(\n              \"walk_slider\",\n              \"Choose the intensity of Walking:\",\n              grid = TRUE,\n              force_edges = TRUE,\n              choices = c(\"None\",\"Light\", \"Intense\")\n            ),\n            sliderTextInput(\n              \"hike_slider\",\n              \"Choose the intensity of Hiking:\",\n              grid = TRUE,\n              force_edges = TRUE,\n              choices = c(\"None\",\"Light\", \"Intense\")\n            ),\n            sliderTextInput(\n              \"bike_slider\",\n              \"Choose the intensity of Biking:\",\n              grid = TRUE,\n              force_edges = TRUE,\n              choices = c(\"None\",\"Light\", \"Intense\")\n            ),\n            sliderTextInput(\n              \"team_slider\",\n              \"Choose the intensity of Team Sport:\",\n              grid = TRUE,\n              force_edges = TRUE,\n              choices = c(\"None\",\"Light\", \"Intense\")\n            ),\n            sliderTextInput(\n              \"lifting_slider\",\n              \"Choose the intensity of Weightlifting:\",\n              grid = TRUE,\n              force_edges = TRUE,\n              choices = c(\"None\",\"Light\", \"Intense\")\n            ),\n            sliderTextInput(\n              \"other_exerc_slider\",\n              \"Choose the intensity of Other Exercise:\",\n              grid = TRUE,\n              force_edges = TRUE,\n              choices = c(\"None\",\"Light\", \"Intense\")\n            ),\n          )\n        ),\n      ),\n      accordion_panel(\n        \"Social Health\",\n        icon = bs_icon(\"people-fill\"),\n        card (\n          sliderInput(\n            \"friends_slider\",\n            \"Specify the amount of hours socializing with friends per week:\",\n            min = 0,\n            max = 25,\n            value = 10\n          ),\n          sliderInput(\n            \"strangers_slider\",\n            \"Specify amount of hours socializing with strangers per week:\",\n            min = 0,\n            max = 20,\n            value = 10\n          ),\n          sliderInput(\n            \"vol_slider\",\n            \"Specify the amount of time a week spent doing community service:\",\n            min = 0,\n            max = 30,\n            value = 10\n          )\n        )\n      ),\n      accordion_panel(\n        \"Mental Health\",\n        icon = bs_icon(\"person-circle\"),\n        card(\n          sliderInput(\n            \"read_slider\",\n            \"Choose how many hours spent reading:\",\n            min = 0,\n            max = 15,\n            value = 5\n          ),\n          sliderInput(\n            \"journal_slider\",\n            \"Choose how many hours spent journaling:\",\n            min = 0,\n            max = 5,\n            value = 3\n          ),\n          sliderInput(\n            \"mental_slider\",\n            \"Choose how many hours promoting mental health through an activity (e.g., therapy, support group):\",\n            min = 0,\n            max = 20,\n            value = 2\n          ),\n          sliderInput(\n            \"wellbeing_slider\",\n            \"Choose how many hours engaging in an activity that promotes wellbeing:\",\n            min = 0,\n            max = 20,\n            value = 2\n          )\n        )\n        \n      ),\n      accordion_panel(\n        \"Spiritual Health\",\n        icon = bs_icon(\"yin-yang\"),\n        card(\n          sliderInput(\n            \"meditate_slider\",\n            \"Choose how many hours a week spent meditating:\",\n            min = 0,\n            max = 5,\n            value = 2\n          ),\n          sliderInput(\n            \"mindful_slider\",\n            \"Choose how many hours a week are spent practicing mindfulness:\",\n            min = 0,\n            max = 5,\n            value = 1\n          ),\n          sliderInput(\n            \"religious_slider\",\n            \"Choose how many hours a week spent at a religious institution:\",\n            min = 0,\n            max = 10,\n            value = 3\n          ),\n          sliderInput(\n            \"pray_slider\",\n            \"Choose how many hours a week spent praying:\",\n            min = 0,\n            max = 5,\n            value = 1\n          ),\n          sliderInput(\n            \"yoga_slider\",\n            \"Choose how many hours a week spent doing yoga:\",\n            min = 0,\n            max = 5,\n            value = 3\n          ),\n          sliderInput(\n            \"sacred_slider\",\n            \"Choose how many hours a week are spent studying sacred texts:\",\n            min = 0,\n            max = 10,\n            value = 2\n          ),\n          sliderInput(\n            \"spirit_slider\",\n            \"Choose how many hours a week are spent on other spiritual activities:\",\n            min = 0,\n            max = 10,\n            value = 2\n          )\n        )\n        \n      ),\n    ),\n  ),\n  tabsetPanel(\n    id = \"tabs\",\n    nav_panel(title = \"Introduction\", value = \"intro\", intro_card),\n    nav_panel(title = \"Design Cube(s)\", value = \"cube\", plot_card[[2]]),\n    nav_panel(title = \"Assumptions\", value = \"assumption\",\n              navset_card_underline(\n                nav_panel(title = \"Independence\", text_card[[1]]),\n                nav_panel(title = \"Residual vs Fitted\", plot_card[[4]]),\n                nav_panel(title = \"Normal QQ Plot\", plot_card[[5]]),\n                nav_panel(title = \"Outliers\", text_card[[2]])\n              )\n    ),\n    nav_panel(title = \"Interaction Plot\", value = \"interaction\", plot_card[[1]]),\n    nav_panel(title = \"Effects\", value = \"effect\", plot_card[[3]]),\n    footer = tagList(\n      conditionalPanel(\n        condition = \"input.tabs != 'intro' && input.tabs != 'effect'\",\n        layout_columns(table_card[[2]], table_card[[1]], col_widths = c(4, 8))\n      ),\n      conditionalPanel(\n        condition = \"input.tabs == 'effect'\",\n        table_card[[3]]\n      )\n    )\n  ),\n  \n)\n\n# Define server logic\nserver <- function(input, output, session) {\n  \n  f <- reactiveValues(\n    data = NULL,\n    design = NULL,\n    result = NULL,\n    std_dev = NULL,\n    health_value = NULL\n  )\n  \n  factorCalc <- reactive({\n    # Create a vector of the number of levels for each factor\n    numSelectedFactors = length(input$factors)\n    \n    # Get selected factors\n    first_factor <- if (numSelectedFactors >= 1)\n      input$factors[1]\n    else\n      NULL\n    second_factor <- if (numSelectedFactors >= 2)\n      input$factors[2]\n    else\n      NULL\n    third_factor <- if (numSelectedFactors >= 3)\n      input$factors[3]\n    else\n      NULL\n    \n    # Set default factor labels\n    firstFactorLabels <- c(\"Low\", \"High\") \n    secondFactorLabels <- c(\"Low\", \"High\") \n    thirdFactorLabels <- c(\"Low\", \"High\")\n    \n    # Handle different numbers of factors\n    if (numSelectedFactors == 3) {\n      # For 3 factors\n      levels <- c(2, 2, 2)\n      factorNames <- c(first_factor, second_factor, third_factor)\n      factorLabels <- labelFactors(input$factors, factor_labels)\n      \n      firstFactorLow <- factorLabels[[1]][[1]]\n      firstFactorHigh <- factorLabels[[1]][[2]]\n      \n      secondFactorLow <- factorLabels[[2]][[1]]\n      secondFactorHigh <- factorLabels[[2]][[2]]\n      \n      thirdFactorLow <- factorLabels[[3]][[1]]\n      thirdFactorHigh <- factorLabels[[3]][[2]]\n      \n      # Create the factor vectors for a 3-factor design\n      # Each combination needs 15 repetitions\n      factorA <- c(\n        rep(firstFactorLow, 15),\n        # A low, B low, C low\n        rep(firstFactorHigh, 15),\n        # A high, B low, C low\n        rep(firstFactorLow, 15),\n        # A low, B high, C low\n        rep(firstFactorHigh, 15),\n        # A high, B high, C low\n        rep(firstFactorLow, 15),\n        # A low, B low, C high\n        rep(firstFactorHigh, 15),\n        # A high, B low, C high\n        rep(firstFactorLow, 15),\n        # A low, B high, C high\n        rep(firstFactorHigh, 15)   # A high, B high, C high\n      )\n      \n      factorB <- c(\n        rep(secondFactorLow, 15),\n        # A low, B low, C low\n        rep(secondFactorLow, 15),\n        # A high, B low, C low\n        rep(secondFactorHigh, 15),\n        # A low, B high, C low\n        rep(secondFactorHigh, 15),\n        # A high, B high, C low\n        rep(secondFactorLow, 15),\n        # A low, B low, C high\n        rep(secondFactorLow, 15),\n        # A high, B low, C high\n        rep(secondFactorHigh, 15),\n        # A low, B high, C high\n        rep(secondFactorHigh, 15)  # A high, B high, C high\n      )\n      \n      factorC <- c(\n        rep(thirdFactorLow, 15),\n        # A low, B low, C low\n        rep(thirdFactorLow, 15),\n        # A high, B low, C low\n        rep(thirdFactorLow, 15),\n        # A low, B high, C low\n        rep(thirdFactorLow, 15),\n        # A high, B high, C low\n        rep(thirdFactorHigh, 15),\n        # A low, B low, C high\n        rep(thirdFactorHigh, 15),\n        # A high, B low, C high\n        rep(thirdFactorHigh, 15),\n        # A low, B high, C high\n        rep(thirdFactorHigh, 15)   # A high, B high, C high\n      )\n      \n      # Generate simulated health data for a 3-factor design\n      # Adjust means for different combinations to simulate various effects\n      health <- c(\n        rnorm(15, 2.5, 2.5),\n        # A low, B low, C low\n        rnorm(15, 3.0, 2.5),\n        # A high, B low, C low\n        rnorm(15, 3.5, 2.5),\n        # A low, B high, C low\n        rnorm(15, 4.0, 2.5),\n        # A high, B high, C low\n        rnorm(15, 3.2, 2.5),\n        # A low, B low, C high\n        rnorm(15, 3.7, 2.5),\n        # A high, B low, C high\n        rnorm(15, 4.2, 2.5),\n        # A low, B high, C high\n        rnorm(15, 4.7, 2.5)   # A high, B high, C high\n      )\n      \n      # Create data frame with all three factors\n      data <- data.frame(factorA, factorB, factorC, health)\n      \n      # Generate the full factorial design\n      design <- gen.factorial(levels, nVars = numSelectedFactors, varNames = factorNames)\n      \n      # Extract variables for analysis\n      A <- data$factorA\n      B <- data$factorB\n      C <- data$factorC\n      H <- data$health\n      \n      # Run ANOVA with all three factors and their interactions\n      f$result <- aov(H ~ A * B * C)\n      \n    } else if (numSelectedFactors == 2) {\n      # For 2 factors\n      levels <- c(2, 2)\n      factorNames <- c(first_factor, second_factor)\n      factorLabels <- labelFactors(input$factors, factor_labels)\n      \n      firstFactorLow <- factorLabels[[1]][[1]]\n      firstFactorHigh <- factorLabels[[1]][[2]]\n      \n      secondFactorLow <- factorLabels[[2]][[1]]\n      secondFactorHigh <- factorLabels[[2]][[2]]\n      \n      factorA <- c(\n        rep(firstFactorLow, 15),\n        rep(firstFactorHigh, 15),\n        rep(firstFactorLow, 15),\n        rep(firstFactorHigh, 15)\n      )\n      \n      factorB <- c(\n        rep(secondFactorLow, 15),\n        rep(secondFactorLow, 15),\n        rep(secondFactorHigh, 15),\n        rep(secondFactorHigh, 15)\n      )\n      \n      # Generate simulated health data\n      health <- c(rnorm(15, 2.5, 2.5),\n                  rnorm(15, 3.0, 2.5),\n                  rnorm(15, 3.5, 2.5),\n                  rnorm(15, 4.0, 2.5))\n      \n      # Create data frame with two factors\n      data <- data.frame(factorA, factorB, health)\n      \n      # Generate the full factorial design\n      design <- gen.factorial(levels, nVars = numSelectedFactors, varNames = factorNames)\n      \n      # Extract variables for analysis\n      A <- data$factorA\n      B <- data$factorB\n      H <- data$health\n      \n      # Run ANOVA with two factors\n      f$result <- aov(H ~ A * B)\n    }\n    \n    # Store the data in the reactiveValues\n    f$design <- design\n    f$data <- data\n  })\n  \n  getModel <- reactive({\n    numSelectedFactors = length(input$factors)\n    factorCalc()\n    df <- f$data\n    A <- df$factorA\n    B <- df$factorB\n    C <- df$factorC\n    H <- df$health\n    \n    if (numSelectedFactors == 2){\n      model <- lm(H ~ A*B, data = df, \n                  contrasts = list(A = contr.FrF2, B = contr.FrF2))\n    } else if (numSelectedFactors == 3){\n      model <- lm(H ~ A*B*C, data = df, \n                  contrasts = list(A = contr.FrF2, B = contr.FrF2, C = contr.FrF2))\n    }\n    \n    return(model)\n  })\n  \n  # Function to generate summary without creating plots\n  generate_summary <- reactive({\n    # Ensure at least 2 health dimensions are selected\n    if (length(input$factors) < 2) {\n      f$std_dev <- NULL\n      f$health_value <- NULL\n      return(NULL)\n    }\n    \n    factorCalc()\n    data <- f$data\n    factors_lookup <- lookupFactors()\n    \n    # Initialize default values\n    f$std_dev <- NA\n    f$health_value <- NA\n    \n    # Extract the factors (only handle 2 factors for now)\n    if (length(input$factors) == 2) {\n      # Get the two selected factors\n      selected_factors <- input$factors\n      factor1 <- selected_factors[1]\n      factor2 <- selected_factors[2]\n      \n      # Get factor labels from factor_labels\n      low1 <- factor_labels[[factor1]][[1]]  # Low level for first factor\n      high1 <- factor_labels[[factor1]][[2]] # High level for first factor\n      low2 <- factor_labels[[factor2]][[1]]  # Low level for second factor\n      high2 <- factor_labels[[factor2]][[2]] # High level for second factor\n      \n      \n      A <- data$factorA\n      B <- data$factorB\n      H <- data$health\n      \n      # Map the factor levels to numeric or categorical for tapply\n      # Assume factorA and factorB in data are already labeled as \"Low\"/\"High\" or similar\n      levels_A <- unique(A)\n      levels_B <- unique(B)\n      \n      # Ensure levels match factor_labels\n      if (!all(levels_A %in% c(low1, high1)) || !all(levels_B %in% c(low2, high2))) {\n        warning(\"Factor levels in data do not match expected labels. Attempting to map.\")\n        # Map data levels to low/high\n        A_mapped <- ifelse(A %in% c(low1), \"Low\", \"High\")\n        B_mapped <- ifelse(B %in% c(low2), \"Low\", \"High\")\n      } else {\n        A_mapped <- A\n        B_mapped <- B\n      }\n      \n      # Calculate means and standard deviations\n      means <- tapply(H, list(A_mapped, B_mapped), mean, na.rm = TRUE)\n      sd <- tapply(H, list(A_mapped, B_mapped), sd, na.rm = TRUE)\n      \n      \n      # Define low_low and high_high based on factor_labels (no need for complex lookup)\n      low_low <- c(low1, low2)  # Worst case: both factors at low level\n      high_high <- c(high1, high2)  # Best case: both factors at high level\n      \n      # Extract indices for low_low and high_high\n      low_low_idx <- c(match(low_low[1], dimnames(means)[[1]]), match(low_low[2], dimnames(means)[[2]]))\n      high_high_idx <- c(match(high_high[1], dimnames(means)[[1]]), match(high_high[2], dimnames(means)[[2]]))\n      \n      \n      # Extract values\n      mod_insuf <- means[low_low_idx[1], low_low_idx[2]]  # Worst case\n      int_suf <- means[high_high_idx[1], high_high_idx[2]]  # Best case\n      \n      mod_insuf_sd <- sd[low_low_idx[1], low_low_idx[2]]  # SD for worst case\n\n      \n      # Calculate differences and approximate percentage improvement\n      diff_health <- int_suf - mod_insuf\n      pct_improve <- if (mod_insuf != 0) (diff_health / mod_insuf) * 100 else 0  # Avoid division by zero\n      \n      # Standard deviation-based health improvement\n      diff_health_sd <- if (mod_insuf_sd != 0) (int_suf - mod_insuf) / mod_insuf_sd else 0  # Avoid division by zero\n      \n      # Store results\n      f$std_dev <- round(diff_health_sd, 2)\n      f$health_value <- round(pct_improve, 1)\n    }\n    \n    return(TRUE)  # Indicate success\n  })\n  selected_data <- reactive({\n    req(input$person) \n    row <- which(individuals$name == input$person)\n    if (length(row) == 0) return(NULL)\n    individuals[row, ]  \n  })\n  \n  observe({\n    data <- selected_data()\n    if (is.null(data)) return()\n    \n    for (col in names(data)){\n      if (col == \"person\") next\n      \n      value <- data[[col]]\n      \n      if(is.numeric(value) || is.list(value)){\n        if (is.list(value)) {\n          value <- unlist(value)  # Ensure it's a numeric vector\n        }\n        updateSliderInput(session, col, value = value)\n      } else if (is.character(value)) {\n        updateSliderTextInput(session, col, selected = value)\n      } \n    }\n  })\n  \n  # Update the output renderers to handle the case when fewer than 2 dimensions are selected\n  output$sd <- renderText({\n    isTwoFactor = length(input$factors) == 2\n    if (!isTwoFactor || is.null(generate_summary())) {\n      return(\"N/A\")\n    }\n    return(f$std_dev)\n  })\n  \n  output$health_change <- renderText({\n    isTwoFactor = length(input$factors) == 2\n    if (!isTwoFactor || is.null(generate_summary())) {\n      return(\"N/A\")\n    }\n    return(paste0(f$health_value, \"%\"))\n  })\n  \n  output$interaction_plot <- renderPlot({\n    numFactors <- length(input$factors)\n    if (numFactors < 2 || numFactors == 3) {\n      plot(0, 0, type = \"n\", axes = FALSE, ann = FALSE)\n      text(0, 0, \"Please select 2 subfactors under the Physical Health panel!\", cex = 1.5)\n      return()\n    }\n    \n    factorCalc()\n    df <- f$data\n    \n    # Use the selected dimensions for plot labels\n    labels <- labelFactors(input$factors, factors_plot_labels)\n    \n    interaction.plot(\n      df$factorA, \n      df$factorB, \n      df$health,\n      xlab = labels[1],\n      ylab = \"Overall Health Score\",\n      trace.label = labels[2]\n    )\n  })\n  \n  output$factorial <- renderPlotly({\n    # Create factorial design grid\n    df <- expand.grid(\n      factorA = c(0, 1),\n      factorB = c(0, 1),\n      factorC = c(0, 1)\n    )\n    \n    # Add hover text using dynamic factor_names\n    df$factorA_text <- ifelse(df$factorA == 0, \n                              factor_labels[[factor_names[1]]][[1]], \n                              factor_labels[[factor_names[1]]][[2]])\n    df$factorB_text <- ifelse(df$factorB == 0, \n                              factor_labels[[factor_names[2]]][[1]], \n                              factor_labels[[factor_names[2]]][[2]])\n    df$factorC_text <- ifelse(df$factorC == 0, \n                              factor_labels[[factor_names[3]]][[1]], \n                              factor_labels[[factor_names[3]]][[2]])\n    \n    # Edge definitions \n    edges <- list(\n      c(1, 2), c(2, 4), c(4, 3), c(3, 1),  # Bottom square\n      c(5, 6), c(6, 8), c(8, 7), c(7, 5),  # Top square\n      c(1, 5), c(2, 6), c(3, 7), c(4, 8)   # Vertical edges\n    )\n    \n    # Set up the color palette\n    edge_colors <- paletteer_d(\"DresdenColor::paired\")\n    \n    # Function to determine changing factor and generate edge label dynamically\n    get_edge_info <- function(df, edge, factor_names) {\n      v1 <- df[edge[1], ]\n      v2 <- df[edge[2], ]\n      \n      # Identify which factor changes (columns 1:3 are factorA, factorB, factorC)\n      diff_factor <- which(v1[1:3] != v2[1:3])\n      if (length(diff_factor) != 1) stop\n      (\"Error: Exactly one factor should change per edge\")\n      \n      # Get the factor name and levels dynamically\n      factor_name <- factor_names[diff_factor]\n      level1 <- v1[[paste0(\"factor\", LETTERS[diff_factor], \"_text\")]]\n      level2 <- v2[[paste0(\"factor\", LETTERS[diff_factor], \"_text\")]]\n      \n      # Create label with proper capitalization\n      label <- paste0(\n        toupper(substr(factor_name, 1, 1)),\n        substr(factor_name, 2, nchar(factor_name)),\n        \": \", level1, \" → \", level2\n      )\n      \n      return(label)\n    }\n    \n    # Initialize plot \n    plot <- plot_ly()\n    \n    # Add edges with dynamic labels\n    for (i in seq_along(edges)) {\n      edge <- edges[[i]]\n      edge_label <- get_edge_info(df, edge, factor_names)\n      \n      plot <- plot %>% add_trace(\n        x = df$factorA[edge],\n        y = df$factorB[edge],\n        z = df$factorC[edge],\n        type = 'scatter3d',\n        mode = 'lines',\n        name = edge_label,\n        line = list(color = edge_colors[i], width = 6),\n        hoverinfo = 'skip',\n        showlegend = TRUE\n      )\n    }\n    \n    # Add vertices\n    hover_template <- paste(factor_names[1], \": %{customdata[0]}<br>\",\n                            factor_names[2], \": %{customdata[1]}<br>\",\n                            factor_names[3], \": %{customdata[2]}\",\n                            \"<extra><\/extra>\")\n    \n    custom_data <- lapply(1:nrow(df), function(i) {\n      list(df$factorA_text[i], df$factorB_text[i], df$factorC_text[i])\n    })\n    \n    plot <- plot %>% add_trace(\n      x = df$factorA,\n      y = df$factorB,\n      z = df$factorC,\n      type = 'scatter3d',\n      mode = 'markers',\n      name = \"Factor Points\",\n      marker = list(size = 8, color = \"black\", symbol = \"circle\"),\n      customdata = custom_data,\n      hovertemplate = hover_template\n    )\n    \n    # Layout configuration \n    plot %>% layout(\n      scene = list(\n        xaxis = list(title = factor_names[1], showgrid = FALSE),\n        yaxis = list(title = factor_names[2], showgrid = FALSE),\n        zaxis = list(title = factor_names[3], showgrid = FALSE)\n      ),\n      title = \"3-D Representation of the 2ᵏ Factorial Design\",\n      legend = list(\n        title = list(text = \"Factors and Levels\"),\n        orientation = \"h\",\n        visible = ifelse(input$isMobile, FALSE, TRUE)\n      )\n    )\n  })\n  \n  output$effects_plot <- renderPlot({\n    model <- getModel()\n    \n    # Extract coefficients (half effects)\n    coeffs <- coef(model)[-1]  # Remove intercept\n    \n    # Create half-normal plot of effects\n    par(mfrow = c(1, 2))\n    \n    # Normal plot\n    qqnorm(coeffs, main = \"Normal Plot of Effects\", \n           xlab = \"Normal Scores\", ylab = \"Estimated Effects\", \n           pch = 16, col = \"blue\")\n    abline(lm(sort(coeffs) ~ qnorm(ppoints(length(coeffs)))))\n    \n    # Half-normal plot\n    abs_coeffs <- abs(coeffs)\n    qqnorm(abs_coeffs, main = \"Half-Normal Plot of Effects\", \n           xlab = \"Half-Normal Scores\", ylab = \"Absolute Effects\", \n           pch = 16, col = \"red\", plot.it = FALSE)\n    plot_data <- qqnorm(abs_coeffs, plot.it = FALSE)\n    plot(plot_data$x, plot_data$y, main = \"Half-Normal Plot of Effects\", \n         xlab = \"Half-Normal Scores\", ylab = \"Absolute Effects\", \n         pch = 16, col = \"red\")\n    \n    # Add labels for significant effects\n    parnames <- names(coeffs)\n    labeled <- abs_coeffs > (2 * sd(abs_coeffs))\n    if (any(labeled)) {\n      factor_labels <- formatSigEffect(parnames[labeled], input$factors)\n      text(plot_data$x[labeled], plot_data$y[labeled], \n           labels = factor_labels, pos = 2)\n    }\n  })\n  \n  output$independence <- renderPrint({\n    cat(\"When looking at our factors they are orthogonal since they do not depend on one another. \\nThus, this design fufills the condition of independence.\")\n  })\n  \n  output$residual <- renderPlot({\n    numFactors <- length(input$factors)\n    if (numFactors < 2) {\n      return()\n    }\n    model <- getModel()\n    plot(fitted(model), residuals(model), \n         xlab = \"Fitted Values\", ylab = \"Residuals\",\n         main = \"Residuals vs Fitted\", pch = 19, col = \"blue\")\n    abline(h = 0, lty = 2, col = \"red\")\n  })\n  \n  output$QQ <- renderPlot({\n    numFactors <- length(input$factors)\n    if (numFactors < 2) {\n      return()\n    }\n    model <- getModel()\n    qqnorm(residuals(model), main = \"Normal Q-Q Plot\", pch = 19, col = \"blue\")\n    qqline(residuals(model), col = \"red\", lwd = 2)\n  })\n  \n  output$outlier <- renderPrint({\n    numFactors <- length(input$factors)\n    if (numFactors < 2) {\n      return()\n    }\n    model <- getModel()\n    df <- f$data\n    tryCatch({\n      cat(\"Gaptest Analysis for Outlier Detection:\\n\")\n      gap_result <- Gaptest(df)\n      \n      if (is.null(gap_result)){\n        cat(\"There are no outliers in this dataset!\")\n      } else {\n        print(gap_result)\n      }\n    }, error = function(e) {\n      cat(\"Error in outlier detection: \", e$message, \"\\n\")\n      cat(\"Cook's Distances for potential outliers:\\n\")\n      cooks_d <- cooks.distance(model)\n      print(sort(cooks_d[cooks_d > 4/length(cooks_d)], decreasing = TRUE))\n    })\n  })\n  \n  output$effects_output <- renderUI({\n    model <- getModel()\n    \n    # Extract coefficients (half effects)\n    coeffs <- coef(model)[-1]  # Remove intercept\n    \n    # Calculate full effects (2 × coefficients)\n    effects <- 2 * coeffs\n    \n    # Create a data frame of effects\n    effects_df <- data.frame(\n      Estimate = effects,\n      `Half_Effect` = coeffs,\n      `Std_Error` = summary(model)$coefficients[-1, \"Std. Error\"],\n      `t_value` = summary(model)$coefficients[-1, \"t value\"],\n      `Pr(>|t|)` = summary(model)$coefficients[-1, \"Pr(>|t|)\"]\n    )\n    sig_effects <- which(effects_df[[5]] < 0.05)\n    \n    effects_df <- labelTableFactors(effects_df,input$factors)\n    \n    \n    HTML(\n      kable(effects_df, row.names = TRUE) %>%\n        kable_styling(\n          bootstrap_options = c(\"striped\", \"responsive\"),\n          full_width = FALSE,\n          position = \"left\"\n        ) %>%\n        # Highlight significant p-values\n        row_spec(\n          sig_effects,\n          bold = TRUE,\n          background = \"#e67763\",\n          color = \"#FFF\"\n        ) %>%\n        # Add footer with significance key\n        add_footnote(\n          c(\"Significant Effects are highlighted if p < 0.05\"),\n          notation = \"none\"\n        )\n    )\n    \n  })\n  \n  output$anova <- renderUI({\n    if (length(input$factors) < 2){\n      return()\n    }\n    factorCalc()\n    table <- displayTable(f,input$factors, \"anova\")\n  })\n  \n  output$design <- renderUI({\n    if (length(input$factors) < 2){\n      return()\n    }\n    factorCalc()\n    table <- displayTable(f, input$factors, \"design\")\n  })\n  \n  output$bio <- renderUI({\n    bio <- as.character(individuals[trimws(individuals$name) == input$person,\n                                    \"biography\"][1])\n  })\n  \n\n  \n}\n\n# Run the application\nshinyApp(ui, server)\n","type":"text"},{"name":"Data/ind_data.rds","content":"H4sIAAAAAAAAA81ZS6/cthWW7wOxr59JXKABioJoFt7ce3cBurSL9OHGKYrGRbszOBqOxFxK\nlElqxtOV/0a3/Q9dFf0RXXbbX9FV0e8ckhqNPJOMr40kAwgjkTyH53znKerPZ0VRHBcnJ0fF\n8Slui9M/Pv/Vxc8x9jEePsX1ANft4qS4RZNfSSfr9PDBl7bVL3uV536r2nadHk6eWafzxBfK\nmDxx/KRZD/TKaO/lQKKH+5vPlQ/imV2l57v8/KWdKydD3vAODz5tg2q92hb0xn9ZUKG9kGKu\n5roE2VzIsrR9G2QbxKq2Isgr5UXn9FwJ3YpGaszpVrcVqGbSyLYE0VyrcCm+qpUopVOLHrqI\n4GR55UWtnGj74HTQthWynYtaejFTqhWlbb32EC1geaNUIK60vpQG0Chs7ioVPATRRomVdVe0\nAmx0WzolfV7fORuUpmES91L8QZXM9Fz4Wj3ywoMR6QYy6zoLfIiysU4Jp6reSCdW0kBYMLDM\n0dkeaxTLC4A66Mk6Y1q96lgLrFKvlCu1Zy66UW2EoIPiQZeK2SnX6EAqioX0vC0RL60Bxko5\nnwUAAlCAlbdN07c6rMEtG2gG/mMBDIne6HYOqFvl/WhPVsB0sFQrqwjahVOGbeuDw+LLZP+/\nJd+MHlDrqha+rK01+NMKdhVByZJEWulQY0knvScjLqwTwGdu8U/bLmFb5aPyG3VqTZ6D5Sul\nrlQ796x5B0voUneQh/DZaCtKo2R70XdCLQEX2GXx4HyW3OcvoIA7MIiqtT3Ja5TqmO/CGmNX\nfuqU5yLUcSVks2UpSQFpGO15b6ooBOm4kEvaRSEUvFcuJH1U+7Vdw4M6aMD4w84RjwU8NGtF\nLu2S0w3eBlGsvYJe/YysAk1n5FK0mbFLiLMAjWSuzNDbUksTnYZgtW221D84bUQ7LZxSrKCo\nnOxqXZLAumrJTIhXsrfHItuI2jaKlXhEUShNqC8o4kptez/BjIx/kaOIcCOBfd8hVgILvFJY\nEYxeMPopOi7FINdcg29nMAi9Z5hmqmgeOJUC1jGYgLIGaB7xiwzAaM7Ugtx5puYRcnhpX1UG\nptkDC7aDW+RIVQ3EZr2F16GXnGdmJMHYKF/bKBugR3YR1bohBpR0RKtWolO2M4NCVxCbs6LU\nTNo7+Ayt55wW3UWHFHi2oqBi5UgU9i/gZcwMYFbZhH+nZB8tSMkCWc9BnLZ3fpPYWsIYngqU\nsS6QA/UegWR9p4M0l+JzRXfRhcoabqzaiggzwpzvIKSOeSAnazIw238tYEEUhLVRu6Fme73s\npaGAJI2QOXSM4pe9huoN+FA6CisyXxT1UrBuOVJWumk4z/mUm3Uj3ZqSRkMuP+RMYt97MG9Q\ne0I0GwvNeSulKpaSDCkRRxZUpXZIFMQoxx/7OgGZkKAEtivTZBjZNhvbyYbqi4pJYOOqHBnZ\neP/m6hytB2WuYqWCJiXiYBlVgemJAwSzCPI1amgFG2mTnDplpVhroSOHPRXLnF4XsiFng9Yd\nlcWZNpxVz8ExENSydHoBfUDWoW6wl1H4XIoo3MaUY8tvSuwGeIqNwUc2JVFlEWIpJJ1mSOGC\nSn+CqLMoADMzZBWOSfgTl9ZJlSdP2aqbugHeS5WSLe30yKfGIWqwlKZXPgW10RXnqU194OxB\npZTSh3JLrnZDuTlHREZQYWVHecCQ8q3ijMEl0WffYktvlcJ/oeOK5i2RE1VFRcciUjwqHBfB\nWHOW2tkWdZ68KNXIDEWqjQRjzH++92QByYZc7/TIbYZoqoKW5E9we5InG5FsEeus2sTvuSjX\npUnQlga7q2izHH/R7TYpnkwRLmbSp8oYE1aM2RJ1ilgtoTmKl8Z+MdCp0m/sFcWa5oxRJo/4\nkj5RFBQgGveD99It55hYD5FygZchnFsWEO5O3hm7tnG/x76T273Iol5XsEAMPu5yCJscZ8mw\nRzdS/xyN61WLVgJyLcIKoYdIXCpju1Q6h1pBPkdN23zjtnlrOLBDbkj5FIAgOJ1YK4lODqEP\ncMmYSHdcj2pYP/jchQ4lyPUxKLgzSB0mKkvsqgfItUPn/tkX6IOSCjsb6k2/vdVaL2zZ+0Oa\n5Wmhp2K4aWtznT+wraXt4Z5yBoFrVnWUf7abgY1ayQdzKzQkt2Qc9iZqpDadVm6wUmHm3Yee\nIxdmnlTrHOH/pDenXH+DpuKrDLsqWSuVjaHfhTe0djVu02VIjRt1D0bPHMgiLt8Ypmg/Hfef\nsZXg1HouKungJ5D7PHovGmRMrm0lcyijpuoNNjk+Y9NWctW0m4TbU9jkrpcDd1w3nUUXEXIb\nxUESCw4KMr9uIOHJqk/pI9UAhtr6wBXPtqHG2NDNJuFSvt7kWyqsF9z1bCXrsu5dWe9K1R3w\n5tdK+NYashDV6IVgSN+XRfGa3mZ/9Bt9Lp6KuW3/8/qvAf+i6cv8qn0vT1LfpEMa/YhHHzXk\n5MrVPVLU5H391pMgnvOL5sEDd34Bz1y9LdV74nvnyYzKaBrb1uUaDPYTHjy2g9/7V+19oXdd\nBb4Pja7jQt+PLneejmpCPtP6Exodd+iCk9+hbz6Ucrz4+HO3/na67wD67yrgP2ZFkPBwHT3+\nScG/x6LIv+uNP0zjPz5wPD1nftfeNz08fnAg/0T/+GfDOFEOhv3lq1LRe/HgKb+2dr538vfW\nul33I6K996P1bzAeDRTF3SLa6zhdR7hupP+jpMP4/2REc2OynuZOR2NF4nk6ohn/TovdPxo/\nm2A3Dqp996fP6IzibSYO4vTBzhPqg/gcxP8g6Q6RaD/X6zwMm+x8fBe03toc7wTvezLfN2Hz\nQ3Cp7xKjd1X/h4bRYYljJNA4m90fZSy6f5juU23i+08mNKfpuj+iy//FiD7TnKVrTPsw/X8y\nkuOnk33ORuuP05osY56/X7yZnceZ+XjPc6bJWX+81xiPXfoU16TZJ88+2cbjx5P74z00uZrl\n383R/dgGZxOa4ltojtJeu2TLv2yn09HcvupZFNs43ByNjWXLex+N5o9305zEyp18v5WN8kWM\nvk9zcNBg7iNm2vJnntzh3kufRl94o+dDq3svnelsj54tZNgeuV1KN5uQpvOb7dEP+TD7BR0w\nTCb4FOfFy162+ybM9sSDOKGmsnwYDw7pfHBC0NDXSttO1blNJ5sTDV0/XUQnLJMh+hA5GZq9\nORSUnHC/lz53bY9+FKHhM7IplPGLxFT/4GRbKTcZP1vaCVK36QhswjIdcW2P3o0nxpN9hk9O\n2+P30+eVqcukr8cTJsPB+0Q0OqCZDNFx1UQuOuZV8+kgnw/lwe0AuOXs6jIHAUXT0esYLben\nkcLnYilS8uDZXAZ5uXAUL0Xxv/8DSOY4+6chAAA=","type":"binary"},{"name":"Data/individual_data.csv","content":"﻿names,biography,calorie_slider,protein_slider,fat_slider,carb_slider,fasting_slider,other_nutr_slider,sleep_quan_slider,sleep_qual_slider,sleep_eat_slider,screentime_slider,melatonin_slider,swim_slider,run_slider,walk_slider,hike_slider,bike_slider,team_slider,lifting_slider,other_exerc_slider,friends_slider,strangers_slider,vol_slider,read_slider,journal_slider,mental_slider,wellbeing_slider,meditate_slider,mindful_slider,religious_slider,pray_slider,yoga_slider,sacred_slider,spirit_slider\r\nMonique,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,\r\nSarah,,At Target,Below Target,At Target,At Target,Intermittent,At Target,\"7,8\",Excellent,3,1,0,None,None,Moderate,None,None,None,None,None,0,0,10,0,0,4,0,0,0,1,1,0,0,0\r\nJenny,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,\r\nLori,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,\r\nKelly,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,\r\nAmy,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,\r\nMelissa,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,\r\nLisa,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,\r\n,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,\r\nTest Low,\"Hi, I don’t do much\",Below Target,Below Target,Below Target,Below Target,Dry,Below Target,\"2,4\",Terrible,0,0,0,None,None,None,None,None,None,None,None,0,0,0,0,0,0,0,0,0,0,0,0,0,0\r\nTest Moderate,\"Hi, I do a bit\",At Target,At Target,At Target,At Target,Water,At Target,\"6,7\",Excellent,2,3,5,Moderate,Moderate,Moderate,Moderate,Moderate,Moderate,Moderate,Moderate,10,10,15,10,3,10,10,3,3,5,2,3,5,5\r\nTest Intense,\"Hi, I'm superhuman\",Above Target,Above Target,Above Target,Above Target,Intermittent,Above Target,\"8,9\",Excellent,4,5,10,Intense,Intense,Intense,Intense,Intense,Intense,Intense,Intense,25,20,30,15,5,20,20,5,5,10,3,5,10,10","type":"text"},{"name":"Data/individual_data.json","content":"[\n  {\n    \"name\": \"Sarah\",\n    \"biography\": \"Sarah is a dedicated accountant who takes pride in maintaining a balanced diet. She carefully tracks her nutrition and has been consistently meeting her calorie targets while working on increasing her protein intake. Recently, she's started incorporating more regular walks into her routine and is planning to expand her exercise regimen. She practices intermittent fasting and volunteers regularly in her community. Sarah is beginning to explore mindfulness practices to help manage work-related stress.\",\n    \"calorie_slider\": \"At Target\",\n    \"protein_slider\": \"Below Target\",\n    \"fat_slider\": \"At Target\",\n    \"carb_slider\": \"At Target\",\n    \"fasting_slider\": \"Intermittent\",\n    \"other_nutr_slider\": \"At Target\",\n    \"sleep_quan_slider\": \"7,8\",\n    \"sleep_qual_slider\": \"Excellent\",\n    \"sleep_eat_slider\": 3,\n    \"screentime_slider\": 1,\n    \"melatonin_slider\": 0,\n    \"swim_slider\": \"None\",\n    \"run_slider\": \"None\",\n    \"walk_slider\": \"Light\",\n    \"hike_slider\": \"None\",\n    \"bike_slider\": \"None\",\n    \"team_slider\": \"None\",\n    \"lifting_slider\": \"None\",\n    \"other_exerc_slider\": \"None\",\n    \"friends_slider\": 0,\n    \"strangers_slider\": 0,\n    \"vol_slider\": 10,\n    \"read_slider\": 0,\n    \"journal_slider\": 0,\n    \"mental_slider\": 4,\n    \"wellbeing_slider\": 0,\n    \"meditate_slider\": 0,\n    \"mindful_slider\": 0,\n    \"religious_slider\": 1,\n    \"pray_slider\": 1,\n    \"yoga_slider\": 0,\n    \"sacred_slider\": 0,\n    \"spirit_slider\": 0\n  },\n  {\n    \"name\": \"Monique\",\n    \"biography\": \"Monique is a high school science teacher with a passion for outdoor activities. She regularly hikes on weekends and participates in community clean-up events. Monique prioritizes getting enough sleep and follows a balanced diet, though she occasionally indulges in her favorite desserts. She enjoys spending time with friends and has recently started a book club to combine her love of reading with social interaction.\",\n    \"calorie_slider\": \"At Target\",\n    \"protein_slider\": \"At Target\",\n    \"fat_slider\": \"At Target\",\n    \"carb_slider\": \"At Target\",\n    \"fasting_slider\": \"Water\",\n    \"other_nutr_slider\": \"At Target\",\n    \"sleep_quan_slider\": \"7,8\",\n    \"sleep_qual_slider\": \"Good\",\n    \"sleep_eat_slider\": 3,\n    \"screentime_slider\": 2,\n    \"melatonin_slider\": 0,\n    \"swim_slider\": \"None\",\n    \"run_slider\": \"None\",\n    \"walk_slider\": \"Light\",\n    \"hike_slider\": \"Light\",\n    \"bike_slider\": \"None\",\n    \"team_slider\": \"None\",\n    \"lifting_slider\": \"None\",\n    \"other_exerc_slider\": \"None\",\n    \"friends_slider\": 15,\n    \"strangers_slider\": 5,\n    \"vol_slider\": 10,\n    \"read_slider\": 10,\n    \"journal_slider\": 0,\n    \"mental_slider\": 5,\n    \"wellbeing_slider\": 5,\n    \"meditate_slider\": 0,\n    \"mindful_slider\": 0,\n    \"religious_slider\": 2,\n    \"pray_slider\": 0,\n    \"yoga_slider\": 0,\n    \"sacred_slider\": 0,\n    \"spirit_slider\": 2\n  },\n  {\n    \"name\": \"Jenny\",\n    \"biography\": \"Jenny is a freelance graphic designer who works from home. She's health-conscious and follows a high-protein diet to support her weightlifting routine. Jenny is disciplined about her sleep schedule and avoids screen time before bed. She struggles with social interactions due to her remote work situation but has recently joined a local gym to meet new people. Jenny keeps a daily journal to track her fitness progress and emotional wellbeing.\",\n    \"calorie_slider\": \"At Target\",\n    \"protein_slider\": \"Above Target\",\n    \"fat_slider\": \"Below Target\",\n    \"carb_slider\": \"At Target\",\n    \"fasting_slider\": \"Intermittent\",\n    \"other_nutr_slider\": \"At Target\",\n    \"sleep_quan_slider\": \"7,8\",\n    \"sleep_qual_slider\": \"Excellent\",\n    \"sleep_eat_slider\": 2,\n    \"screentime_slider\": 1,\n    \"melatonin_slider\": 0,\n    \"swim_slider\": \"None\",\n    \"run_slider\": \"None\",\n    \"walk_slider\": \"Light\",\n    \"hike_slider\": \"None\",\n    \"bike_slider\": \"None\",\n    \"team_slider\": \"None\",\n    \"lifting_slider\": \"Intense\",\n    \"other_exerc_slider\": \"None\",\n    \"friends_slider\": 5,\n    \"strangers_slider\": 5,\n    \"vol_slider\": 0,\n    \"read_slider\": 5,\n    \"journal_slider\": 5,\n    \"mental_slider\": 10,\n    \"wellbeing_slider\": 10,\n    \"meditate_slider\": 3,\n    \"mindful_slider\": 3,\n    \"religious_slider\": 0,\n    \"pray_slider\": 0,\n    \"yoga_slider\": 3,\n    \"sacred_slider\": 0,\n    \"spirit_slider\": 2\n  },\n  {\n    \"name\": \"Lori\",\n    \"biography\": \"Lori is a registered nurse working night shifts at a busy hospital. Despite her challenging schedule, she tries to maintain a healthy lifestyle. She struggles with sleep quality and relies on quick meals between shifts. Lori enjoys swimming as her primary form of exercise and uses meditation to manage stress. She has a close circle of friends from nursing school and participates in hospital wellness programs when her schedule allows.\",\n    \"calorie_slider\": \"Below Target\",\n    \"protein_slider\": \"Below Target\",\n    \"fat_slider\": \"At Target\",\n    \"carb_slider\": \"At Target\",\n    \"fasting_slider\": \"Water\",\n    \"other_nutr_slider\": \"At Target\",\n    \"sleep_quan_slider\": \"5,6\",\n    \"sleep_qual_slider\": \"Poor\",\n    \"sleep_eat_slider\": 1,\n    \"screentime_slider\": 2,\n    \"melatonin_slider\": 5,\n    \"swim_slider\": \"Light\",\n    \"run_slider\": \"None\",\n    \"walk_slider\": \"Light\",\n    \"hike_slider\": \"None\",\n    \"bike_slider\": \"None\",\n    \"team_slider\": \"None\",\n    \"lifting_slider\": \"None\",\n    \"other_exerc_slider\": \"None\",\n    \"friends_slider\": 10,\n    \"strangers_slider\": 15,\n    \"vol_slider\": 5,\n    \"read_slider\": 5,\n    \"journal_slider\": 0,\n    \"mental_slider\": 5,\n    \"wellbeing_slider\": 5,\n    \"meditate_slider\": 5,\n    \"mindful_slider\": 3,\n    \"religious_slider\": 0,\n    \"pray_slider\": 0,\n    \"yoga_slider\": 0,\n    \"sacred_slider\": 0,\n    \"spirit_slider\": 0\n  },\n\n  {\n      \"name\": \"Kelly\",\n      \"biography\": \"Kelly is a marketing executive and mother of one young child. She balances a demanding career with family responsibilities, often sacrificing personal time. Kelly struggles to maintain consistent exercise but tries to incorporate family walks and bike rides when possible. She's interested in nutrition and meal planning to improve her family's diet. Kelly values her religious community and attends services regularly, finding spiritual connection helps manage her stress.\",\n      \"calorie_slider\": \"At Target\",\n      \"protein_slider\": \"Below Target\",\n      \"fat_slider\": \"Below Target\",\n      \"carb_slider\": \"At Target\",\n      \"fasting_slider\": \"None\",\n      \"other_nutr_slider\": \"At Target\",\n      \"sleep_quan_slider\": \"5,6\",\n      \"sleep_qual_slider\": \"Poor\",\n      \"sleep_eat_slider\": 2,\n      \"screentime_slider\": 4,\n      \"melatonin_slider\": 0,\n      \"swim_slider\": \"None\",\n      \"run_slider\": \"None\",\n      \"walk_slider\": \"Light\",\n      \"hike_slider\": \"None\",\n      \"bike_slider\": \"Light\",\n      \"team_slider\": \"None\",\n      \"lifting_slider\": \"None\",\n      \"other_exerc_slider\": \"None\",\n      \"friends_slider\": 15,\n      \"strangers_slider\": 10,\n      \"vol_slider\": 5,\n      \"read_slider\": 3,\n      \"journal_slider\": 0,\n      \"mental_slider\": 5,\n      \"wellbeing_slider\": 5,\n      \"meditate_slider\": 0,\n      \"mindful_slider\": 0,\n      \"religious_slider\": 8,\n      \"pray_slider\": 8,\n      \"yoga_slider\": 0,\n      \"sacred_slider\": 5,\n      \"spirit_slider\": 5\n  },\n  {\n      \"name\": \"Amy\",\n      \"biography\": \"Amy is a college professor teaching environmental science. She's passionate about sustainability and participates in environmental initiatives. Amy maintains an active lifestyle, cycling to classes and swimming. She follows a plant-based diet and enjoys cooking vegetarian meals for her family. Amy struggles with screen time management and sometimes sacrifices sleep to complete lesson plans, but she's working on improving her sleep hygiene and work-life balance.\",\n      \"calorie_slider\": \"At Target\",\n      \"protein_slider\": \"Below Target\",\n      \"fat_slider\": \"Above Target\",\n      \"carb_slider\": \"Above Target\",\n      \"fasting_slider\": \"Water\",\n      \"other_nutr_slider\": \"At Target\",\n      \"sleep_quan_slider\": \"6,7\",\n      \"sleep_qual_slider\": \"Good\",\n      \"sleep_eat_slider\": 2,\n      \"screentime_slider\": 5,\n      \"melatonin_slider\": 0,\n      \"swim_slider\": \"Light\",\n      \"run_slider\": \"Light\",\n      \"walk_slider\": \"Light\",\n      \"hike_slider\": \"None\",\n      \"bike_slider\": \"Intense\",\n      \"team_slider\": \"None\",\n      \"lifting_slider\": \"None\",\n      \"other_exerc_slider\": \"None\",\n      \"friends_slider\": 20,\n      \"strangers_slider\": 15,\n      \"vol_slider\": 20,\n      \"read_slider\": 15,\n      \"journal_slider\": 3,\n      \"mental_slider\": 5,\n      \"wellbeing_slider\": 5,\n      \"meditate_slider\": 0,\n      \"mindful_slider\": 3,\n      \"religious_slider\": 0,\n      \"pray_slider\": 0,\n      \"yoga_slider\": 5,\n      \"sacred_slider\": 0,\n      \"spirit_slider\": 3\n  },\n\n  {\n    \"name\": \"Melissa\",\n    \"biography\": \"Melissa is a senior software developer who recently committed to improving her overall health. After years of sedentary work habits, she's joined a running club and is training for her first 5K. Melissa tracks her nutrition carefully and has been focusing on increasing her protein intake to support her new exercise routine. She practices intermittent fasting and has established a consistent sleep schedule. Melissa enjoys reading personal development books and has started journaling about her fitness journey.\",\n    \"calorie_slider\": \"At Target\",\n    \"protein_slider\": \"Above Target\",\n    \"fat_slider\": \"At Target\",\n    \"carb_slider\": \"At Target\",\n    \"fasting_slider\": \"Intermittent\",\n    \"other_nutr_slider\": \"At Target\",\n    \"sleep_quan_slider\": \"7,8\",\n    \"sleep_qual_slider\": \"Good\",\n    \"sleep_eat_slider\": 0,\n    \"screentime_slider\": 2,\n    \"melatonin_slider\": 0,\n    \"swim_slider\": \"None\",\n    \"run_slider\": \"Light\",\n    \"walk_slider\": \"Intense\",\n    \"hike_slider\": \"None\",\n    \"bike_slider\": \"None\",\n    \"team_slider\": \"None\",\n    \"lifting_slider\": \"Light\",\n    \"other_exerc_slider\": \"None\",\n    \"friends_slider\": 10,\n    \"strangers_slider\": 10,\n    \"vol_slider\": 5,\n    \"read_slider\": 15,\n    \"journal_slider\": 5,\n    \"mental_slider\": 10,\n    \"wellbeing_slider\": 10,\n    \"meditate_slider\": 3,\n    \"mindful_slider\": 3,\n    \"religious_slider\": 0,\n    \"pray_slider\": 0,\n    \"yoga_slider\": 3,\n    \"sacred_slider\": 0,\n    \"spirit_slider\": 0\n  },\n  {\n    \"name\": \"Lisa\",\n    \"biography\": \"Lisa is a retired elementary school teacher who now volunteers at her local library. She maintains an active lifestyle through daily walks, gardening, and weekly yoga classes. Lisa enjoys cooking and focuses on nutritious, balanced meals. She has a robust social life with former colleagues and family and hosts a monthly book club. Lisa values spiritual well-being and attends church regularly, finding peace in prayer and community connection.\",\n    \"calorie_slider\": \"At Target\",\n    \"protein_slider\": \"At Target\",\n    \"fat_slider\": \"At Target\",\n    \"carb_slider\": \"At Target\",\n    \"fasting_slider\": \"None\",\n    \"other_nutr_slider\": \"At Target\",\n    \"sleep_quan_slider\": \"7,8\",\n    \"sleep_qual_slider\": \"Good\",\n    \"sleep_eat_slider\": 2,\n    \"screentime_slider\": 1,\n    \"melatonin_slider\": 0,\n    \"swim_slider\": \"None\",\n    \"run_slider\": \"None\",\n    \"walk_slider\": \"Intense\",\n    \"hike_slider\": \"None\",\n    \"bike_slider\": \"None\",\n    \"team_slider\": \"None\",\n    \"lifting_slider\": \"None\",\n    \"other_exerc_slider\": \"Light\",\n    \"friends_slider\": 20,\n    \"strangers_slider\": 15,\n    \"vol_slider\": 25,\n    \"read_slider\": 20,\n    \"journal_slider\": 0,\n    \"mental_slider\": 15,\n    \"wellbeing_slider\": 15,\n    \"meditate_slider\": 0,\n    \"mindful_slider\": 3,\n    \"religious_slider\": 10,\n    \"pray_slider\": 10,\n    \"yoga_slider\": 5,\n    \"sacred_slider\": 8,\n    \"spirit_slider\": 8\n  },\n  {\n    \"name\": \"Test Low\",\n    \"biography\": \"Hi, I don’t do much\",\n    \"calorie_slider\": \"Below Target\",\n    \"protein_slider\": \"Below Target\",\n    \"fat_slider\": \"Below Target\",\n    \"carb_slider\": \"Below Target\",\n    \"fasting_slider\": \"Dry\",\n    \"other_nutr_slider\": \"Below Target\",\n    \"sleep_quan_slider\": \"2,4\",\n    \"sleep_qual_slider\": \"Poor\",\n    \"sleep_eat_slider\": 0,\n    \"screentime_slider\": 0,\n    \"melatonin_slider\": 0,\n    \"swim_slider\": \"None\",\n    \"run_slider\": \"None\",\n    \"walk_slider\": \"None\",\n    \"hike_slider\": \"None\",\n    \"bike_slider\": \"None\",\n    \"team_slider\": \"None\",\n    \"lifting_slider\": \"None\",\n    \"other_exerc_slider\": \"None\",\n    \"friends_slider\": 0,\n    \"strangers_slider\": 0,\n    \"vol_slider\": 0,\n    \"read_slider\": 0,\n    \"journal_slider\": 0,\n    \"mental_slider\": 0,\n    \"wellbeing_slider\": 0,\n    \"meditate_slider\": 0,\n    \"mindful_slider\": 0,\n    \"religious_slider\": 0,\n    \"pray_slider\": 0,\n    \"yoga_slider\": 0,\n    \"sacred_slider\": 0,\n    \"spirit_slider\": 0\n  },\n  {\n    \"name\": \"Test Moderate\",\n    \"biography\": \"Hi, I do a bit\",\n    \"calorie_slider\": \"At Target\",\n    \"protein_slider\": \"At Target\",\n    \"fat_slider\": \"At Target\",\n    \"carb_slider\": \"At Target\",\n    \"fasting_slider\": \"Water\",\n    \"other_nutr_slider\": \"At Target\",\n    \"sleep_quan_slider\": \"6,7\",\n    \"sleep_qual_slider\": \"Excellent\",\n    \"sleep_eat_slider\": 2,\n    \"screentime_slider\": 3,\n    \"melatonin_slider\": 5,\n    \"swim_slider\": \"Light\",\n    \"run_slider\": \"Light\",\n    \"walk_slider\": \"Light\",\n    \"hike_slider\": \"Light\",\n    \"bike_slider\": \"Light\",\n    \"team_slider\": \"Light\",\n    \"lifting_slider\": \"Light\",\n    \"other_exerc_slider\": \"Light\",\n    \"friends_slider\": 10,\n    \"strangers_slider\": 10,\n    \"vol_slider\": 15,\n    \"read_slider\": 10,\n    \"journal_slider\": 3,\n    \"mental_slider\": 10,\n    \"wellbeing_slider\": 10,\n    \"meditate_slider\": 3,\n    \"mindful_slider\": 3,\n    \"religious_slider\": 5,\n    \"pray_slider\": 2,\n    \"yoga_slider\": 3,\n    \"sacred_slider\": 5,\n    \"spirit_slider\": 5\n  },\n  {\n    \"name\": \"Test Intense\",\n    \"biography\": \"Hi, I'm superhuman\",\n    \"calorie_slider\": \"Above Target\",\n    \"protein_slider\": \"Above Target\",\n    \"fat_slider\": \"Above Target\",\n    \"carb_slider\": \"Above Target\",\n    \"fasting_slider\": \"Intermittent\",\n    \"other_nutr_slider\": \"Above Target\",\n    \"sleep_quan_slider\": \"8,9\",\n    \"sleep_qual_slider\": \"Excellent\",\n    \"sleep_eat_slider\": 4,\n    \"screentime_slider\": 5,\n    \"melatonin_slider\": 10,\n    \"swim_slider\": \"Intense\",\n    \"run_slider\": \"Intense\",\n    \"walk_slider\": \"Intense\",\n    \"hike_slider\": \"Intense\",\n    \"bike_slider\": \"Intense\",\n    \"team_slider\": \"Intense\",\n    \"lifting_slider\": \"Intense\",\n    \"other_exerc_slider\": \"Intense\",\n    \"friends_slider\": 25,\n    \"strangers_slider\": 20,\n    \"vol_slider\": 30,\n    \"read_slider\": 15,\n    \"journal_slider\": 5,\n    \"mental_slider\": 20,\n    \"wellbeing_slider\": 20,\n    \"meditate_slider\": 5,\n    \"mindful_slider\": 5,\n    \"religious_slider\": 10,\n    \"pray_slider\": 3,\n    \"yoga_slider\": 5,\n    \"sacred_slider\": 10,\n    \"spirit_slider\": 10\n  }\n]\n","type":"text"},{"name":"R/2k Factor Design.Rmd","content":"---\r\ntitle: \"2k Factorial\"\r\nauthor: \"Rachel Hart\"\r\ndate: \"`r Sys.Date()`\"\r\noutput: html_document\r\n---\r\n# 2k Factorial Design\r\n\r\n## Loading Libraries\r\n```{r, message = FALSE}\r\nlibrary(designr)\r\nlibrary(AlgDesign)\r\nlibrary(tidyverse)\r\nlibrary(ggplot2)\r\nlibrary(plotly)\r\nlibrary(knitr)\r\nlibrary(kableExtra)\r\nlibrary(plot3D)\r\nlibrary(AlgDesign)\r\n```\r\n\r\n## Two Factors (2^2)\r\n\r\n## Simulating the Data for Two Factors\r\n```{r}\r\n#Create a vector column for thickness \r\nhealth2<-c(rnorm(15, 4.5, 2.5), rnorm(15, 3.5, 2.5), rnorm(15, 5.5, 2.5), rnorm(15, 2.5, 2.5))\r\n\r\n#Create the factors \r\nsleep2 <- c(rep(\"Insufficient\",15), \r\n\t\t\t\t\t\trep(\"Sufficient\",15), \r\n\t\t\t\t\t\trep(\"Sufficient\",15), \r\n\t\t\t\t\t\trep(\"Insufficient\",15)) \r\n\r\nexercise2 <- c(rep(\"Strenuous\",15), \r\n\t\t\t\t\trep(\"Moderate\",15), \r\n\t\t\t\t\trep(\"Strenuous\",15), \r\n\t\t\t\t\trep(\"Moderate\",15)) \r\n\r\n#Merge the data into a dataset 'data' \r\ndata2<- data.frame(sleep2, \r\n\t\t\t\texercise2, \r\n\t\t\t\thealth2) \r\ndata2\r\n\r\n#Assign the factors into variables \r\nA = data$sleep2 \r\nB = data$exercise2 \r\nZ = data$health2 \r\n\r\n\r\n#Plot the interaction plot \r\ninteraction.plot(A, B, Z, \r\n\t\t\t\txlab = \"Sleep\", \r\n\t\t\t\tylab = \"Health\") \r\n\r\n```\r\n\r\n### Two Factor Two Levels\r\n```{r}\r\nfactors = 2\r\nlevels = c(-1,1)\r\nx1 = c()\r\nx2 = c()\r\n\r\nfor (j in 1:length(levels)) {\r\n    for (i in 1:length(levels)) {\r\n    x1 = c(x1, levels[i])\r\n    x2 = c(x2, levels[j])\r\n  }\r\n}\r\n\r\ntwodf = data.frame(row.names =  c(1:length(x1)), x1,x2)\r\n\r\nkable(twodf, row.names = T)  |>\r\n  kable_styling('striped',fixed_thead = T, full_width = F) |>\r\n\r\n  column_spec(2,color= 'white',\r\n              background = spec_color(twodf$x1,end = 0.7, option = 'A' )) |>\r\n  column_spec(3,color= 'white',\r\n              background = spec_color(twodf$x2 ,end = 0.7, option = 'A' ))\r\n\r\nplot_ly(twodf, x = ~x1, y = ~x2) \r\n```\r\n\r\n### Modeling\r\n```{r}\r\nresult <-aov(Z ~ A*B) \r\nanova(result) \r\n\r\nlinear_two <- lm(Z ~ A*B)\r\nlinear_two\r\n\r\n```\r\n\r\n\r\n# 3 Factor Simulated Interaction Plots\r\n\r\n\r\n```{r}\r\nhealth <-c(rnorm(15, 2.5, 1.5), rnorm(15, 3.5, 1.5), rnorm(15, 3.5, 1.5), rnorm(15, 4.5, 1.5), \r\n          rnorm(15, 3.5, 1.5), rnorm(15, 4.5, 1.5), rnorm(15, 4.5, 1.5), rnorm(15, 5.5, 1.5))\r\n\r\n#Create the factors \r\nsleep <- c(rep(\"Insufficient\",15), \r\n\t\t\t\t\t\trep(\"Sufficient\",15), \r\n\t\t\t\t\t\trep(\"Insufficient\",15), \r\n\t\t\t\t\t\trep(\"Sufficient\",15),\r\n            rep(\"Insufficient\",15), \r\n\t\t\t\t\t\trep(\"Sufficient\",15), \r\n\t\t\t\t\t\trep(\"Insufficient\",15), \r\n\t\t\t\t\t\trep(\"Sufficient\",15))\r\n\r\nexercise <- c(rep(\"Moderate\",15), \r\n\t\t\t\t\t    rep(\"Moderate\",15), \r\n\t\t\t\t\t    rep(\"Strenuous\",15), \r\n\t\t\t\t\t    rep(\"Strenuous\",15),\r\n\t\t\t\t\t    rep(\"Moderate\",15), \r\n\t\t\t\t\t\t  rep(\"Moderate\",15), \r\n\t\t\t\t\t\t  rep(\"Strenuous\",15), \r\n\t\t\t\t\t\t  rep(\"Strenuous\",15)) \r\n\r\nnutrition <- c(rep(\"Mindless\",15), \r\n\t\t\t\t\t  rep(\"Mindless\",15), \r\n\t\t\t\t\t  rep(\"Mindless\",15), \r\n\t\t\t\t\t  rep(\"Mindless\",15),\r\n\t\t\t\t\t  rep(\"Purposeful\",15), \r\n\t\t\t\t\t\trep(\"Purposeful\",15), \r\n\t\t\t\t\t\trep(\"Purposeful\",15), \r\n\t\t\t\t\t\trep(\"Purposeful\",15))\r\n\r\n#Merge the data into a dataset 'data' \r\ndata<- data.frame(sleep, exercise, nutrition, health) \r\ndata\r\n\r\n#Assign the factors into variables \r\nS = data$sleep \r\nE = data$exercise \r\nN = data$nutrition\r\nH = data$health\r\n\r\n```\r\n## Main Effects\r\n```{r}\r\nsleep_effect <- data %>%\r\n  group_by(sleep) %>%\r\n  summarise(mean_health = mean(health))\r\nsleep_effect\r\n\r\nexercise_effect <- data %>%\r\n  group_by(exercise) %>%\r\n  summarise(mean_health = mean(health))\r\nexercise_effect\r\n\r\nnutrition_effect <- data %>%\r\n  group_by(nutrition) %>%\r\n  summarise(mean_health = mean(health))\r\nnutrition_effect\r\n```\r\n\r\n\r\n```{r}\r\nggplot(data, aes(x = sleep, y = health)) +\r\n  stat_summary(fun = mean, geom = \"bar\", fill = \"lightblue\", color = \"black\") +\r\n  labs(title = \"Main Effect of Sleep\", x = \"Sleep\", y = \"Average Health\") +\r\n  theme_minimal()\r\n\r\nggplot(data, aes(x = exercise, y = health)) +\r\n  stat_summary(fun = mean, geom = \"bar\", fill = \"lightgreen\", color = \"black\") +\r\n  labs(title = \"Main Effect of Exercise\", x = \"Exercise\", y = \"Average Health\") +\r\n  theme_minimal()\r\n\r\nggplot(data, aes(x = nutrition, y = health)) +\r\n  stat_summary(fun = mean, geom = \"bar\", fill = \"lightcoral\", color = \"black\") +\r\n  labs(title = \"Main Effect of Nutrition\", x = \"Nutrition\", y = \"Average Health\") +\r\n  theme_minimal()\r\n\r\n#Highlight the difference between the bars, annotate it\r\n\r\n```\r\n\r\n\r\n## Interactions\r\n```{r}\r\ninteraction_effects <- data %>%\r\n  group_by(sleep, exercise, nutrition) %>%\r\n  summarise(mean_health = mean(health), .groups = 'drop')\r\n\r\ninteraction_effects\r\n```\r\n\r\n\r\n```{r}\r\n# Function to generate summary based on interaction plot choice\r\ngenerate_summary <- function(plot_type, data) {\r\n  \r\n  if (plot_type == \"sleep_exercise\" | plot_type == \"exercise_sleep\") {\r\n    interaction.plot(sleep, exercise, health,  \r\n                     xlab = \"Sleep\", \r\n                     ylab = \"Health\", trace.label = \"Exercise\")\r\n    \r\n    means <- tapply(data$health, list(data$sleep, data$exercise), mean)\r\n    sd <- tapply(data$health, list(data$sleep, data$exercise), sd)\r\n    \r\n    # Extract specific scenarios for the summary\r\n    mod_insuf <- means[\"Insufficient\", \"Moderate\"]\r\n    mod_suf <- means[\"Sufficient\", \"Moderate\"]\r\n    int_suf <- means[\"Sufficient\", \"Strenuous\"]\r\n    \r\n    # Extract standard deviations for these scenarios\r\n    mod_insuf_sd <- sd[\"Insufficient\", \"Moderate\"]\r\n    mod_suf_sd <- sd[\"Sufficient\", \"Moderate\"]\r\n    int_suf_sd <- sd[\"Sufficient\", \"Strenuous\"]\r\n    \r\n    # Calculate differences and approximate percentage improvement\r\n    diff_health <- int_suf - mod_insuf\r\n    pct_improve <- (diff_health / mod_insuf) * 100\r\n    \r\n    # Standard deviation-based health improvement\r\n    diff_health_sd <- (int_suf - mod_insuf) / mod_insuf_sd\r\n    \r\n    cat(paste0(\"In this simulation, going from moderate exercise with insufficient sleep (mean health =\", \r\n        round(mod_insuf, 2), \", SD =\", round(mod_insuf_sd, 2), \") to strenuous exercise with sufficient sleep (mean health =\", \r\n        round(int_suf, 2), \", SD =\", round(int_suf_sd, 2), \") increases your health score by an average of \", \r\n        round(diff_health, 2), \" units, corresponding to an approximate \",\r\n        round(diff_health_sd, 2), \" sample standard deviation(s) or a \",\r\n        round(pct_improve, 1),\"% health improvement.\\n\"))\r\n    \r\n  } else if (plot_type == \"nutrition_sleep\" | plot_type == \"sleep_nutrition\") {\r\n    interaction.plot(nutrition, sleep, health,  \r\n                     xlab = \"Nutrition\", \r\n                     ylab = \"Health\", trace.label = \"Sleep\")\r\n    \r\n    means <- tapply(data$health, list(data$nutrition, data$sleep), mean)\r\n    sd <- tapply(data$health, list(data$nutrition, data$sleep), sd)\r\n    \r\n    # Extract specific scenarios for the summary\r\n    mod_insuf_nut <- means[\"Mindless\", \"Insufficient\"]\r\n    mod_suf_nut <- means[\"Mindless\", \"Sufficient\"]\r\n    int_suf_nut <- means[\"Purposeful\", \"Sufficient\"]\r\n    \r\n    # Extract standard deviations for these scenarios\r\n    mod_insuf_nut_sd <- sd[\"Mindless\", \"Insufficient\"]\r\n    mod_suf_nut_sd <- sd[\"Mindless\", \"Sufficient\"]\r\n    int_suf_nut_sd <- sd[\"Purposeful\", \"Sufficient\"]\r\n    \r\n    # Calculate differences and approximate percentage improvement\r\n    diff_health <- int_suf_nut - mod_insuf_nut\r\n    pct_improve <- (diff_health / mod_insuf_nut) * 100\r\n    \r\n    # Standard deviation-based health improvement\r\n    diff_health_sd <- (int_suf_nut - mod_insuf_nut) / mod_insuf_nut_sd\r\n    \r\n    cat(paste0(\"In this simulation, going from mindless nutrition with insufficient sleep (mean health =\", \r\n        round(mod_insuf_nut, 2), \", SD =\", round(mod_insuf_nut_sd, 2), \") to purposeful nutrition with sufficient sleep (mean health =\", \r\n        round(int_suf_nut, 2), \", SD =\", round(int_suf_nut_sd, 2), \") increases your health score by an average of \", \r\n        round(diff_health, 2), \" units, corresponding to an approximate \",\r\n        round(diff_health_sd, 2), \" sample standard deviation(s) or a \",\r\n        round(pct_improve, 1), \"% health improvement.\\n\"))\r\n    \r\n  } else if (plot_type == \"exercise_nutrition\" | plot_type == \"nutrition_exercise\") {\r\n    interaction.plot(exercise, nutrition, health,  \r\n                     xlab = \"Exercise\", \r\n                     ylab = \"Health\", trace.label = \"Nutrition\")\r\n    \r\n    means <- tapply(data$health, list(data$exercise, data$nutrition), mean)\r\n    sd <- tapply(data$health, list(data$exercise, data$nutrition), sd)\r\n    \r\n    # Extract specific scenarios for the summary\r\n    mod_insuf_mind <- means[\"Moderate\", \"Mindless\"]\r\n    mod_suf_mind <- means[\"Moderate\", \"Purposeful\"]\r\n    int_suf_purp <- means[\"Strenuous\", \"Purposeful\"]\r\n    \r\n    # Extract standard deviations for these scenarios\r\n    mod_insuf_mind_sd <- sd[\"Moderate\", \"Mindless\"]\r\n    mod_suf_mind_sd <- sd[\"Moderate\", \"Purposeful\"]\r\n    int_suf_purp_sd <- sd[\"Strenuous\", \"Purposeful\"]\r\n    \r\n    # Calculate differences and approximate percentage improvement\r\n    diff_health <- int_suf_purp - mod_insuf_mind\r\n    pct_improve <- (diff_health / mod_insuf_mind) * 100\r\n    \r\n    # Standard deviation-based health improvement\r\n    diff_health_sd <- (int_suf_purp - mod_insuf_mind) / mod_insuf_mind_sd\r\n    \r\n    cat(\"In this simulation, going from moderate exercise with mindless nutrition (mean health =\", \r\n        round(mod_insuf_mind, 2), \", SD =\", round(mod_insuf_mind_sd, 2), \") to strenuous exercise with purposeful nutrition (mean health =\", \r\n        round(int_suf_purp, 2), \", SD =\", round(int_suf_purp_sd, 2), \") increases your health score by an average of\", \r\n        round(diff_health, 2), \" units, corresponding to an approximate \", \r\n        round(diff_health_sd, 2), \" sample standard deviation(s) or a \",\r\n        round(pct_improve, 1), \"% health improvement.\\n\")\r\n    \r\n  } else {\r\n    cat(\"Invalid plot type. Please use a combination one of the following: 'sleep, exercise, and nutrition'.\\n\")\r\n  }\r\n}\r\n\r\ngenerate_summary(\"nutrition_exercise\", data)\r\n```\r\n\r\n\r\n\r\n## Making Models\r\n```{r}\r\nlinear <- lm(H ~ E+N+S)\r\nsummary(linear)\r\n\r\ninteraction <- lm(H ~ E*N*S)\r\nsummary(interaction)\r\n\r\nanova(interaction, linear)\r\n\r\n```\r\n\r\n```{r}\r\nanova <- aov(H~E+N+S)\r\nanova\r\n\r\nint_aov <- aov(H~E*N*S)\r\nint_aov\r\n\r\n#names(anova)\r\n#anova$coefficients[]\r\n```\r\n\r\n# Equations\r\n```{r}\r\n# Health = 2.3834 + 0.9718*Exercise+1.0019*Nutrition+1.4653*Sleep\r\n\r\n# Health = 2.5048 + 0.3598*strenuous + 0.8043*purposeful + 1.4802*sufficient+1.1338*strenuous*purposeful+0.7087*strenuous*sufficient-0.1201*purposeful*sufficient-1.237*strenuous*purposeful*sufficient\r\n```\r\n\r\n\r\n### Three Factors Two Levels\r\n```{r}\r\nfactors = 3\r\nlevels = c(0,1)\r\nsleep = c()\r\nexercise = c()\r\nnutrition = c()\r\n\r\nfor (k in 1:length(levels))\r\n  for (j in 1:length(levels)) {\r\n      for (i in 1:length(levels)) {\r\n      sleep = c(sleep, levels[i])\r\n      exercise = c(exercise, levels[j])\r\n      nutrition = c(nutrition, levels[k])\r\n    }\r\n  }\r\n\r\nthreedf = data.frame(row.names = c(1:length(sleep)), sleep,exercise, nutrition)\r\n\r\nkable(threedf, row.names = T)  |>\r\n  kable_styling('striped',fixed_thead = T, full_width = F) |>\r\n    column_spec(2,color= 'white',\r\n              background = spec_color(threedf$sleep,end = 0.7, option = 'A' )) |>\r\n    column_spec(3,color= 'white',\r\n              background = spec_color(threedf$exercise ,end = 0.7, option = 'A' )) |>\r\n    column_spec(4,color= 'white',\r\n              background = spec_color(threedf$nutrition ,end = 0.7, option = 'A' )) |>\r\n    scroll_box(threedf, height = '400px')\r\n```\r\n\r\n\r\n## Surface Plot\r\n\r\n```{r}\r\nvertices <- data.frame(\r\n  x = c(0, 1, 1, 0, 0, 1, 1, 0), y = c(0, 0, 1, 1, 0, 0, 1, 1), z = c(0, 0, 0, 0, 1, 1, 1, 1))\r\n\r\nedges <- list(c(1,2), c(2,3), c(3,4), c(4,1), c(5,6), c(6,7), c(7,8), c(8,5), c(1,5), c(2,6), c(3,7), c(4,8))\r\n\r\np <- plot_ly(threedf, x = ~sleep, y = ~exercise, z = ~nutrition)\r\n\r\nfor(edge in edges) {\r\n\r\n  p <- add_trace(p,\r\n\r\n                 x = vertices$x[edge],\r\n\r\n                 y = vertices$y[edge],\r\n\r\n                 z = vertices$z[edge],\r\n\r\n                 type = \"scatter3d\",\r\n\r\n                 mode = \"lines\",\r\n\r\n                 line = list(width = 4, color = \"#1f77b4\")\r\n\r\n  )\r\n\r\n}\r\n\r\np <- add_trace(p,\r\n\r\n               x = vertices$x,\r\n\r\n               y = vertices$y,\r\n\r\n               z = vertices$z,\r\n\r\n               type = \"scatter3d\",\r\n\r\n               mode = \"markers\",\r\n\r\n               marker = list(size = 5, color = \"#ff7f0e\")\r\n\r\n)\r\n\r\np <- add_trace(p, text = c(\"Sleep: Low, Exercise: Low, Nutrition: Low\", \"Sleep: High, Exercise: Low, Nutrition: Low\", \"Sleep: Low, Exercise: High, Nutrition: Low\", \"Sleep: High, Exercise: High, Nutrition: Low\", \"Sleep: Low, Exercise: Low, Nutrition: High\", \"Sleep: High, Exercise: Low, Nutrition: High\", \"Sleep: Low, Exercise: High, Nutrition: High\", \"Sleep: High, Exercise: High, Nutrition: High\")) \r\n\r\np <- layout(p,\r\n\r\n            scene = list(\r\n\r\n              xaxis = list(title = \"Sleep\", range = c(0, 1)),\r\n\r\n              yaxis = list(title = \"Exercise\", range = c(0, 1)),\r\n\r\n              zaxis = list(title = \"Nutrition\", range = c(0, 1)),\r\n\r\n              aspectmode = \"cube\"  # ensures equal aspect ratio\r\n\r\n            ),\r\n\r\n            title = \"2^3 Factorial Design Plot\",\r\n            showlegend = FALSE\r\n\r\n)\r\n\r\np\r\n\r\n```\r\n\r\n## Surface Plot\r\n```{r}\r\ngrid_data <- expand.grid(sleep = unique(data$sleep), \r\n                         exercise = unique(data$exercise), \r\n                         nutrition = unique(data$nutrition))\r\n\r\n# Create a matrix of health values based on the combinations of sleep, exercise, and nutrition\r\nhealth_matrix <- matrix(NA, nrow = length(unique(data$sleep)), \r\n                        ncol = length(unique(data$exercise)))\r\n\r\n# Fill the matrix with mean health values for each combination\r\nfor (i in 1:nrow(grid_data)) {\r\n  sleep_level <- grid_data$sleep[i]\r\n  exercise_level <- grid_data$exercise[i]\r\n  nutrition_level <- grid_data$nutrition[i]\r\n  \r\n  # Subset data and calculate the mean health for the combination of factors\r\n  mean_health <- mean(data$health[data$sleep == sleep_level & \r\n                                             data$exercise == exercise_level & \r\n                                             data$nutrition == nutrition_level])\r\n  health_matrix[sleep_level + 1, exercise_level + 1] <- mean_health\r\n}\r\n\r\n# Create the surface plot using plotly\r\nplot_ly(x = unique(data$sleep), \r\n        y = unique(data$exercise), \r\n        z = health_matrix, \r\n        type = \"surface\") %>%\r\n  layout(title = \"Surface Plot of Health vs. Sleep, Exercise, and Nutrition\",\r\n         scene = list(xaxis = list(title = \"Sleep\"),\r\n                      yaxis = list(title = \"Exercise\"),\r\n                      zaxis = list(title = \"Health\")))\r\n```\r\n\r\n\r\n```{r}\r\nfactors = 6\r\nlevels = c(0,1)\r\nsleep = c()\r\nexercise = c()\r\nnutrition = c()\r\nspirituality = c()\r\ncommunity = c()\r\nmental = c()\r\n\r\nfor (k in 1:length(levels))\r\n  for (j in 1:length(levels)) {\r\n      for (i in 1:length(levels)) {\r\n        for(l in 1:length(levels)){\r\n          for(m in 1:length(levels)) {\r\n            for(n in 1:length(levels)){\r\n      sleep = c(sleep, levels[i])\r\n      exercise = c(exercise, levels[j])\r\n      nutrition = c(nutrition, levels[k])\r\n      spirituality = c(spirituality, levels[l])\r\n      community = c(community, levels[m])\r\n      mental = c(mental, levels[n])\r\n            }\r\n          }\r\n        }\r\n    }\r\n  }\r\n\r\nsixdf = data.frame(row.names = c(1:length(sleep)), sleep,exercise, nutrition, spirituality, community, mental)\r\n\r\nkable(sixdf, row.names = T)  |>\r\n  kable_styling('striped',fixed_thead = T, full_width = F) |>\r\n    column_spec(2,color= 'white',\r\n              background = spec_color(sixdf$sleep,end = 0.7, option = 'A' )) |>\r\n    column_spec(3,color= 'white',\r\n              background = spec_color(sixdf$exercise,end = 0.7, option = 'A' )) |>\r\n    column_spec(4,color= 'white',\r\n              background = spec_color(sixdf$nutrition,end = 0.7, option = 'A' )) |>\r\n    column_spec(5,color= 'white',\r\n              background = spec_color(sixdf$spirituality,end = 0.7, option = 'A' )) |>\r\n    column_spec(6,color= 'white',\r\n              background = spec_color(sixdf$community ,end = 0.7, option = 'A' )) |>\r\n    column_spec(7,color= 'white',\r\n              background = spec_color(sixdf$mental ,end = 0.7, option = 'A' )) |>\r\n    scroll_box(sixdf, height = '400px')\r\n```\r\n\r\n\r\n\r\n\r\n","type":"text"},{"name":"R/helper_formatting.R","content":"library(stringr)\n\nindividuals <- readRDS(\"Data/ind_data.rds\")\n\n#Just modify this to change factors for everything :)\nfactor_labels <- list(\n  \"Sleep\" = list(\"Insufficient\", \"Sufficient\"),\n  \"Exercise\" = list(\"Light\", \"Intense\"),\n  \"Nutrition\" = list(\"Mindless\", \"Purposeful\"),\n  \"Spirituality\" = list(\"Infrequent\", \"Regular\"),\n  \"Socialization\" = list(\"Isolated\", \"Outgoing\"),\n  \"Wellbeing\" = list(\"Neglect\", \"Nurture\")\n)\nfactor_names <- names(factor_labels)\n\n#Change these to Change Interaction Plot Specific Factors\n  factors_plot_labels <- list(\n    \"Sleep\" = \"Sleep Hours\",\n    \"Exercise\" = \"Exercise Intensity\",\n    \"Nutrition\" = \"Nutrition Intention\",\n    \"Spirituality\" = \"Spiritual Engagement\",\n    \"Socialization\" = \"Social Connection\",\n    \"Wellbeing\" = \"Wellbeing Intention\"\n  )\n  \n  lookupFactors <- function(){\n    # Dynamic factors_lookup\n    factors_lookup <- list()\n    \n    # Generate all possible two-factor combinations\n    for (i in seq_along(factor_names)) {\n      for (j in seq(i + 1, length(factor_names))) {\n        factor1 <- factor_names[i]\n        factor2 <- factor_names[j]\n        \n        # Create sorted combination key\n        combo_key <- paste(sort(c(factor1, factor2)), collapse = \"_\")\n        \n        # Define low_low and high_high\n        factors_lookup[[combo_key]] <- list(\n          low_low = c(factor_labels[[factor1]][[1]], factor_labels[[factor2]][[1]]),\n          high_high = c(factor_labels[[factor1]][[2]], factor_labels[[factor2]][[2]])\n        )\n      }\n    }\n    return(factors_lookup)\n    \n  }\n  \n\n#Check if the user is mobile :)\nmobileDetect <- function(inputId, value = 0) {\n  tagList(\n    singleton(tags$head(tags$script(src = \"js/mobile.js\"))),\n    tags$input(id = inputId,\n               class = \"mobile-element\",\n               type = \"hidden\")\n  )\n}\n\nlabelFactors <- function(selected_factors, label_type) {\n  num_factors <- length(selected_factors)\n  # Extract labels for the first num_factors elements in user_input\n  labels <- lapply(selected_factors[1:num_factors], function(factor) {\n    if (factor %in% names(label_type)) {\n      return(label_type[[factor]])\n    } \n  })\n  return(labels)\n}\n\n#Assign the Selected Factors to the Table to make it User-Friendly\nlabelTableFactors <- function(df, selected_factors){\n    if (length(selected_factors) == 2) {\n      row.names(df)[1:3] = c(selected_factors[1], \n      selected_factors[2], \n      paste0(selected_factors[1], \":\", selected_factors[2]))\n    } else if (length(selected_factors) == 3) {\n      row.names(df)[1:7] = c(\n        selected_factors[1],\n        selected_factors[2],\n        selected_factors[3],\n        paste0(selected_factors[1], \":\", selected_factors[2]),\n        paste0(selected_factors[1], \":\", selected_factors[3]),\n        paste0(selected_factors[2], \":\", selected_factors[3]),\n        paste0(\n          selected_factors[1],\n          \":\",\n          selected_factors[2],\n          \":\",\n          selected_factors[3]\n        )\n      )\n    }\n    return(df)\n}\n\n\n#Assign the Selected Factors to the Effect Plot to make it User-Friendly\nformatSigEffect <- function(labels, selected_factors){\n# Abbreviate Nutrition as Nutr, Exercise as Ex, and Sleep is Sleep\n  labels <- gsub(\"A1\", selected_factors[1], labels)\n  labels <- gsub(\"B1\", selected_factors[2], labels)\n  labels <- gsub(\"C1\", selected_factors[3], labels)\n  return(labels)\n}\n\ndisplayTable <- function(f, selected_factors, tableType){\n  \n  isAnova <- tableType == \"anova\"\n  \n  data <- if (isAnova) as.data.frame(anova(f$result)) else as.data.frame(f$design)\n  \n  if (isAnova){\n    anova_results <- anova(f$result)\n    # Round numeric columns to 3 decimal places\n    numeric_cols <- sapply(data, is.numeric)\n    data[, numeric_cols] <- round(data[, numeric_cols], 3)\n    \n    # Format p-values with significance stars\n    if (\"Pr(>F)\" %in% colnames(data)) {\n      # Create a new column for p-value display\n      data$Significance <- \"\"\n      \n      # Add significance stars\n      data$Significance[data$`Pr(>F)` < 0.001] <- \"***\"\n      data$Significance[data$`Pr(>F)` >= 0.001 &\n                          data$`Pr(>F)` < 0.01] <- \"**\"\n      data$Significance[data$`Pr(>F)` >= 0.01 &\n                          data$`Pr(>F)` < 0.05] <- \"*\"\n      data$Significance[data$`Pr(>F)` >= 0.05 &\n                          data$`Pr(>F)` < 0.1] <- \".\"\n      \n      # Format p-values for better readability\n      data$`Pr(>F)` <- sprintf(\"%.3f %s\", data$`Pr(>F)`, data$Significance)\n      \n      # Remove the separate significance column\n      data$Significance <- NULL\n    }\n    data <- labelTableFactors(data, selected_factors)\n    \n  }\n  \n  table <- kable(data, row.names = TRUE) %>%\n    kable_styling(\n      bootstrap_options = c(\"striped\", \"responsive\"),\n      full_width = FALSE, position = if (isAnova) \"left\" else \"center\"\n    )\n  \n  if (isAnova){\n    table <- table %>% row_spec(\n      which(anova_results[, \"Pr(>F)\"] < 0.05),\n      bold = TRUE,\n      background = \"#e67763\",\n      color = \"#FFF\"\n    ) %>%\n      # Add footer with significance key\n      add_footnote(\n        c(\"Significance codes: *** p<0.001, ** p<0.01, * p<0.05, . p<0.1\"),\n        notation = \"none\"\n      )\n    \n  } else {\n    # Check if each factor exists and apply appropriate styling\n    for (i in seq_along(selected_factors)) {\n      factor_name <- selected_factors[i]\n      col_index <- i + 1  # +1 because column 1 is row names\n      \n      # Only apply spec_color if the column exists and contains numeric or factor data\n      if (factor_name %in% colnames(data)) {\n        # Check if column is numeric or can be converted to numeric\n        col_data <- data[[factor_name]]\n        \n        # For factors, convert to numeric 1/2 for Low/High\n        if (is.numeric(col_data)) {\n          # If it's already numeric, use it directly\n          table <- table %>%\n            column_spec(\n              col_index,\n              color = 'white',\n              background = spec_color(col_data, end = 0.7, option = 'A')\n            )\n        }\n      }\n    }\n  }\n  return(HTML(table))\n}","type":"text"},{"name":"R/ui_cards.R","content":"library(bslib)\nlibrary(bsicons)\nlibrary(plotly)\n\n# Global Variables, adjust if needed:\nmin_plot_height <- 625\nmin_table_height <- 10\n\nintro_card <- card(\n  h5(\"Healthy Habits Circle Simulated Experiment Design\", style = \"font-weight: bold;\"), # nolint\n  p(\"2³ factorial design with the following factors:\"),\n  # nolint\n  tags$div(\n    style = \"margin-left: 15px;\",\n    HTML(\"<b>Nutrition:<\/b>\"),\n    tags$ul(\n      tags$li(HTML(\"Purposeful: Tracking calories or practicing healthy eating habits\")),\n      tags$li(\"Mindless: Not planning or practicing healthy eating habits\")\n    ),\n    HTML(\"<b>Sleep:<\/b>\"),\n    tags$ul(\n      tags$li(\"Sufficient: 7 hours of sleep\"),\n      tags$li(\"Insufficient: ≤ 7 hours of sleep\")\n    ),\n    HTML(\"<b>Exercise:<\/b> <i>Exercise Intensity<\/i>\"),\n    tags$ul(\n      tags$li(\"Intense: Engaging in more-strenuous activities\"),\n      tags$li(\"Light: Engaging in non-strenuous actvities or no exercise\")\n    )\n  ),\n  p(HTML(\"<b>Response:<\/b> <i>Health Score<\/i>\"))\n)\n\nplot_card <- list(\n  card(\n    card_header(\"Interaction Plot\"),\n    min_height = min_plot_height,\n    full_screen = TRUE,\n    card_body(\n      layout_columns(\n        value_box(\n          title = \"Standard Deviation\",\n          value = textOutput(\"sd\"),\n          showcase = bs_icon(\"badge-sd-fill\"),\n        ),\n        value_box(\n          title = \"Change in Health\",\n          value = textOutput(\"health_change\"),\n          showcase = bs_icon(\"heart-pulse-fill\"),\n        )\n      ),\n      plotOutput(\"interaction_plot\")\n    )\n  ),\n  card(\n    card_header(\"Factorial Design Plot through Plotly\"),\n    full_screen = TRUE,\n    min_height = min_plot_height,\n    plotlyOutput(\"factorial\")\n    \n  ),\n  card(\n    card_header(\"Effects\"),\n    full_screen = TRUE,\n    min_height = min_plot_height,\n    plotOutput(\"effects_plot\")\n  ),\n  card(\n    card_header(\"Residual vs Fitted Graph\"),\n    full_screen = TRUE,\n    min_height = min_plot_height,\n    plotOutput(\"residual\")\n  ),\n  card(\n    card_header(\"Normal QQ Plot\"),\n    full_screen = TRUE,\n    min_height = min_plot_height,\n    plotOutput(\"QQ\")\n  )\n)\n\ntable_card <- list(\n  card(\n    card_header(\"ANOVA Table\"),\n    min_height = min_table_height,\n    uiOutput(\"anova\")\n  ),\n  card(\n    card_header(\"Factorial Design Table\"),\n    min_height = min_table_height,\n    uiOutput(\"design\")\n  ),\n  card(\n    card_header(\"Effects Table\"),\n    min_height = min_table_height,\n    uiOutput(\"effects_output\")\n  )\n)\n\ntext_card <- list(\n  card(\n    verbatimTextOutput(\"independence\")\n  ),\n  card(\n    verbatimTextOutput(\"outlier\")\n  )\n)\n","type":"text"},{"name":"design.R","content":"library(shiny)\nlibrary(bslib)\nlibrary(daewr)\nlibrary(DoE.base)\nlibrary(ggplot2)\nlibrary(car)\nlibrary(DT)\n\n# Define UI\nui <- fluidPage(\n  titlePanel(\"2^3 Factorial Design Demonstration\"),\n  theme = bs_theme(\n    bootswatch = \"journal\"\n  ),\n  sidebarLayout(\n    sidebarPanel(\n      selectInput(\"dataset\", \"Select Dataset:\",\n                  choices = c(\"Voltmeter Experiment\", \"Custom Data\")),\n      conditionalPanel(\n        condition = \"input.dataset == 'Custom Data'\",\n        fileInput(\"datafile\", \"Upload your CSV file\",\n                  accept = c(\"text/csv\", \"text/comma-separated-values,text/plain\", \".csv\"))\n      ),\n      selectInput(\"tab\", \"Select View:\",\n                  choices = c(\"Design\", \"Assumptions\", \"ANOVA\", \"Effects\", \"Interactions\")),\n      conditionalPanel(\n        condition = \"input.tab == 'Interactions'\",\n        selectInput(\"interaction\", \"Select Interaction:\",\n                    choices = c(\"A×B\", \"A×C\", \"B×C\"))\n      ),\n      br(),\n      h4(\"Voltmeter Experiment Design\", style = \"font-weight: bold;\"),\n      p(\"2³ factorial design with the following factors:\"),\n      \n      tags$div(\n        style = \"margin-left: 15px;\",\n        HTML(\"<b>Factor A:<\/b> Ambient Temperature\"),\n        tags$ul(\n          tags$li(\"Low: 22°C\"),\n          tags$li(\"High: 32°C\")\n        ),\n        \n        HTML(\"<b>Factor B:<\/b> Voltmeter Warm-up Time\"),\n        tags$ul(\n          tags$li(\"Low: 0.5 min\"),\n          tags$li(\"High: 5 min\")\n        ),\n        \n        HTML(\"<b>Factor C:<\/b> Circuit Warm-up Time\"),\n        tags$ul(\n          tags$li(\"Low: 0.5 min\"),\n          tags$li(\"High: 5 min\")\n        )\n      ),\n      \n      p(HTML(\"<b>Response:<\/b> Measured voltage in millivolts\")),\n      p(\"The design has 2 replicates for each treatment combination.\"),\n    ),\n    \n    mainPanel(\n      conditionalPanel(\n        condition = \"input.tab == 'Design'\",\n        h3(\"Experimental Design\"),\n        DTOutput(\"design_table\"),\n      ),\n      conditionalPanel(\n        condition = \"input.tab == 'ANOVA'\",\n        h3(\"ANOVA Results\"),\n        verbatimTextOutput(\"anova_output\")\n      ),\n      conditionalPanel(\n        condition = \"input.tab == 'Effects'\",\n        h3(\"Effects Analysis\"),\n        plotOutput(\"effects_plot\"),\n        verbatimTextOutput(\"effects_output\")\n      ),\n      conditionalPanel(\n        condition = \"input.tab == 'Interactions'\",\n        h3(\"Interaction Plots\"),\n        plotOutput(\"interaction_plot\")\n      ),\n      conditionalPanel(\n        condition = \"input.tab == 'Assumptions'\",\n        h3(\"Model Assumptions\"),\n        tabsetPanel(\n          tabPanel(\"Residuals vs Fitted\", plotOutput(\"resid_fitted\")),\n          tabPanel(\"Normal Q-Q\", plotOutput(\"qq_plot\")),\n          tabPanel(\"Outlier Check\", verbatimTextOutput(\"outlier_check\"))\n        )\n      )\n    )\n  )\n)\n\n# Define server logic\nserver <- function(input, output, session) {\n  \n  # Data reactive\n  getData <- reactive({\n    if (input$dataset == \"Voltmeter Experiment\") {\n      # Load the voltmeter experiment data from daewr package\n      data(volt)\n      return(volt)\n    } else if (input$dataset == \"Custom Data\" && !is.null(input$datafile)) {\n      # Load custom data\n      read.csv(input$datafile$datapath)\n    } else {\n      # Default to volt data if no file uploaded\n      data(volt)\n      return(volt)\n    }\n  })\n  \n  # Fit model reactive\n  getModel <- reactive({\n    df <- getData()\n    # Create model using contr.FrF2 for proper coding\n    model <- lm(y ~ A*B*C, data = df, \n                contrasts = list(A = contr.FrF2, B = contr.FrF2, C = contr.FrF2))\n    return(model)\n  })\n  \n  # Output: Experimental Design Table\n  output$design_table <- renderDT({\n    df <- getData()\n    datatable(df, options = list(pageLength = 16))\n  })\n  \n  \n  # Output: ANOVA Results\n  output$anova_output <- renderPrint({\n    model <- getModel()\n    \n    # Print summary and ANOVA\n    cat(\"Model Summary:\\n\")\n    print(summary(model))\n    \n    cat(\"\\n\\nANOVA Table:\\n\")\n    print(anova(model))\n    \n    # Add Type II ANOVA\n    cat(\"\\n\\nType II ANOVA:\\n\")\n    print(Anova(model, type = 2))\n    \n    # Add Type III ANOVA\n    drop1(model, .~., test=\"F\")\n    cat(\"\\n\\nType III ANOVA:\\n\")\n    print(Anova(model, type = 3))\n  })\n  \n  # Output: Effects Analysis\n  output$effects_plot <- renderPlot({\n    model <- getModel()\n    \n    # Extract coefficients (half effects)\n    coeffs <- coef(model)[-1]  # Remove intercept\n    \n    # Create half-normal plot of effects\n    par(mfrow = c(1, 2))\n    \n    # Normal plot\n    qqnorm(coeffs, main = \"Normal Plot of Effects\", \n           xlab = \"Normal Scores\", ylab = \"Estimated Effects\", \n           pch = 16, col = \"blue\")\n    abline(lm(sort(coeffs) ~ qnorm(ppoints(length(coeffs)))))\n    \n    # Half-normal plot\n    abs_coeffs <- abs(coeffs)\n    qqnorm(abs_coeffs, main = \"Half-Normal Plot of Effects\", \n           xlab = \"Half-Normal Scores\", ylab = \"Absolute Effects\", \n           pch = 16, col = \"red\", plot.it = FALSE)\n    plot_data <- qqnorm(abs_coeffs, plot.it = FALSE)\n    plot(plot_data$x, plot_data$y, main = \"Half-Normal Plot of Effects\", \n         xlab = \"Half-Normal Scores\", ylab = \"Absolute Effects\", \n         pch = 16, col = \"red\")\n    \n    # Add labels for significant effects\n    parnames <- names(coeffs)\n    labeled <- abs_coeffs > (2 * sd(abs_coeffs))\n    if (any(labeled)) {\n      text(plot_data$x[labeled], plot_data$y[labeled], \n           labels = parnames[labeled], pos = 2)\n    }\n  })\n  \n  # Output: Effects Analysis Text\n  output$effects_output <- renderPrint({\n    model <- getModel()\n    \n    # Extract coefficients (half effects)\n    coeffs <- coef(model)[-1]  # Remove intercept\n    \n    # Calculate full effects (2 × coefficients)\n    effects <- 2 * coeffs\n    \n    # Create a data frame of effects\n    effects_df <- data.frame(\n      Effect = names(effects),\n      Estimate = effects,\n      `Half_Effect` = coeffs,\n      `Std_Error` = summary(model)$coefficients[-1, \"Std. Error\"],\n      `t_value` = summary(model)$coefficients[-1, \"t value\"],\n      `Pr(>|t|)` = summary(model)$coefficients[-1, \"Pr(>|t|)\"]\n    )\n    \n    # Print effects table\n    cat(\"Effects Table:\\n\")\n    print(effects_df)\n    \n    # Identify significant effects\n    cat(\"\\nSignificant Effects (p < 0.05):\\n\")\n    sig_effects <- effects_df[effects_df$`Pr(>|t|)` < 0.05, ]\n    if (nrow(sig_effects) > 0) {\n      print(sig_effects)\n    } else {\n      cat(\"No significant effects found at alpha = 0.05\\n\")\n    }\n  })\n  \n  # Output: Interaction Plot\n  output$interaction_plot <- renderPlot({\n    df <- getData()\n    \n    if (input$interaction == \"A×B\") {\n      interaction.plot(df$A, df$B, df$y, type = \"b\", \n                       xlab = if (input$dataset == \"Voltmeter Experiment\") \n                         \"Ambient Temperature (˚C)\" else \"Factor A\", \n                       ylab = if (input$dataset == \"Voltmeter Experiment\") \n                         \"Voltage (mV)\" else \"Response\",\n                       trace.label = if (input$dataset == \"Voltmeter Experiment\") \n                         \"Warm-up minutes\" else \"Factor B\", \n                       main = if (input$dataset == \"Voltmeter Experiment\") \n                             \"Interaction Plot of Temperature x Voltmeter Warm-up Time\" \n                              else \"Interaction Plot of A × B\",\n                       pch = c(19, 17), lty = c(1, 2), \n                       col = c(\"blue\", \"red\"), lwd = 2)\n    } else if (input$interaction == \"A×C\") {\n      interaction.plot(df$A, df$C, df$y, type = \"b\", \n                       xlab = if (input$dataset == \"Voltmeter Experiment\") \n                         \"Ambient Temperature (˚C)\" else \"Factor A\",  \n                       ylab = if (input$dataset == \"Voltmeter Experiment\") \n                         \"Voltage (mV)\" else \"Response\",\n                       trace.label = if (input$dataset == \"Voltmeter Experiment\") \n                         \"Warm-up minutes\" else \"Factor C\", \n                       main = if (input$dataset == \"Voltmeter Experiment\") \n                         \"Interaction Plot of Temperature x Circuit Warm-up Time\" \n                       else \"Interaction Plot of A × C\",\n                       pch = c(19, 17), lty = c(1, 2), \n                       col = c(\"blue\", \"red\"), lwd = 2)\n    } else if (input$interaction == \"B×C\") {\n      interaction.plot(df$B, df$C, df$y, type = \"b\", \n                       xlab = if (input$dataset == \"Voltmeter Experiment\") \n                         \"Voltmeter Warm-up\" else \"Factor B\", \n                       ylab = if (input$dataset == \"Voltmeter Experiment\") \n                         \"Voltage (mV)\" else \"Response\",\n                       trace.label = if (input$dataset == \"Voltmeter Experiment\") \n                         \"Circuit Warm-up\" else \"Factor C\",  \n                       main = if (input$dataset == \"Voltmeter Experiment\") \n                         \"Interaction Plot of Voltmeter Warm-up Time x Circuit Warm-up Time\" \n                       else \"Interaction Plot of B × C\",\n                       pch = c(19, 17), lty = c(1, 2), \n                       col = c(\"blue\", \"red\"), lwd = 2)\n    }\n  })\n  \n  # Output: Model Assumption Checks\n  \n  # Residuals vs Fitted\n  output$resid_fitted <- renderPlot({\n    model <- getModel()\n    plot(fitted(model), residuals(model), \n         xlab = \"Fitted Values\", ylab = \"Residuals\",\n         main = \"Residuals vs Fitted\", pch = 19, col = \"blue\")\n    abline(h = 0, lty = 2, col = \"red\")\n  })\n  \n  # Normal Q-Q Plot\n  output$qq_plot <- renderPlot({\n    model <- getModel()\n    qqnorm(residuals(model), main = \"Normal Q-Q Plot\", pch = 19, col = \"blue\")\n    qqline(residuals(model), col = \"red\", lwd = 2)\n  })\n  # Outlier Check\n  output$outlier_check <- renderPrint({\n    model <- getModel()\n    df <- getData()\n    \n    # Try to use Gaptest from daewr if data structure is appropriate\n    tryCatch({\n      if (input$dataset == \"Voltmeter Experiment\") {\n        cat(\"Gaptest Analysis for Outlier Detection:\\n\")\n        gap_result <- Gaptest(df)\n        \n        if (is.null(gap_result)){\n          cat(\"There are no outliers in this dataset!\")\n        } else {\n          print(gap_result)\n        }\n      } else {\n        cat(\"Outlier check only available for built-in datasets with appropriate structure.\\n\")\n      }\n    }, error = function(e) {\n      cat(\"Error in outlier detection: \", e$message, \"\\n\")\n      cat(\"Cook's Distances for potential outliers:\\n\")\n      cooks_d <- cooks.distance(model)\n      print(sort(cooks_d[cooks_d > 4/length(cooks_d)], decreasing = TRUE))\n    })\n  })\n}\n\n# Run the application \nshinyApp(ui = ui, server = server)","type":"text"},{"name":"shinyapp.Rproj","content":"Version: 1.0\nProjectId: 6da9dab7-061e-454a-bafa-2df622aeab41\n\nRestoreWorkspace: Default\nSaveWorkspace: Default\nAlwaysSaveHistory: Default\n\nEnableCodeIndexing: Yes\nUseSpacesForTab: Yes\nNumSpacesForTab: 2\nEncoding: UTF-8\n\nRnwWeave: Sweave\nLaTeX: pdfLaTeX\n\nProjectName: shiny\n","type":"text"},{"name":"test.R","content":"library(shiny)\nlibrary(shinyWidgets)\n\nui <- fluidPage(\n  tags$h1(\"checkboxGroupButtons examples\"),\n  \n  checkboxGroupButtons(\n    inputId = \"somevalue1\",\n    label = \"Make a choice: \",\n    choices = c(\"A\", \"B\", \"C\")\n  ),\n  verbatimTextOutput(\"value1\"),\n  \n  checkboxGroupButtons(\n    inputId = \"somevalue2\",\n    label = \"With custom status:\",\n    choices = names(iris),\n    status = \"primary\"\n  ),\n  verbatimTextOutput(\"value2\"),\n  \n  checkboxGroupButtons(\n    inputId = \"somevalue3\",\n    label = \"With icons:\",\n    choices = names(mtcars),\n    checkIcon = list(\n      yes = icon(\"square-check\"),\n      no = icon(\"square\")\n    )\n  ),\n  verbatimTextOutput(\"value3\")\n)\n\nserver <- function(input, output) {\n  \n  output$value1 <- renderPrint({ input$somevalue1 })\n  output$value2 <- renderPrint({ input$somevalue2 })\n  output$value3 <- renderPrint({ input$somevalue3 })\n  \n}\n\nif (interactive())\n  shinyApp(ui, server)\n","type":"text"},{"name":"test_people.Rmd","content":"---\ntitle: \"test_people\"\noutput: html_document\n---\n\n```{r}\n# Convert JSON to RDS\nlibrary(jsonlite)\ndata <- fromJSON(\"Data/individual_data.json\")\nsaveRDS(data, \"Data/ind_data.rds\")\n```\n\n```{r}\nindividuals <- readRDS(\"Data/ind_data.rds\")\nlibrary(tidyverse)\nname = \"Kelly\"\nbio <- as.character(individuals[trimws(individuals$name) == name, \"biography\"][1])\n```\n\n```{r}\n# Example dataframe\ndf <- readRDS(\"Data/ind_data.rds\")\n\n# Function to convert the string to a numeric vector\nconvert_to_range <- function(string) {\n  # Split the string by comma\n  split_values <- unlist(strsplit(as.character(string), \",\"))\n  \n  # Convert to numeric\n  numeric_vec <- as.numeric(split_values)\n  \n  # Ensure exactly two values (left and right of comma)\n  if (length(numeric_vec) == 2) {\n    return(numeric_vec)\n  } else {\n    warning(\"Invalid format: expected two numbers separated by a comma\")\n    return(c(NA, NA))  # Return NA if format is wrong\n  }\n}\n\nsaveRDS(df, \"Data/ind_data.rds\")\n```\n\n```{r}\nindividuals <- readRDS(\"Data/ind_data.rds\")\nprint(individuals$name[1])\n\n```\n\n","type":"text"},{"name":"www/styles.css","content":"#factors .btn-group {\n  flex-wrap: wrap;\n  max-width: 280px; \n}\n\n#phys .btn-group {\n  flex-wrap: wrap;\n  max-width: 280px; \n}\n\n","type":"text"}]
