[{"name":"app.R","content":"#\n# This is a Shiny web application. You can run the application by clicking\n# the 'Run App' button above.\n#\n\n# Shiny-related UI libraries \nlibrary(shiny)\nlibrary(shinyjs)\nlibrary(shinyWidgets)\nlibrary(bslib)\nlibrary(bsicons)\n\n#Plot related libraries\nlibrary(plotly)\nlibrary(kableExtra)\nlibrary(tidyverse)\n\n#Factorial Design related libraries\nlibrary(AlgDesign)\n\ncards <- list(\n  card(\n    card_header(\"Interaction Plot\"),\n    min_height = 500,\n    plotOutput(\"test\")\n  ),\n  card(\n    card_header(\"ANOVA Table\"),\n    tableOutput(\"anova\")\n  ),\n  card(\n    card_header(\"Factorial Design Table\"),\n    uiOutput(\"design\")\n  ),\n  card(\n    card_header(\"Factorial Design Plot through Plotly\"),\n    min_height = 500,\n    plotlyOutput(\"factorial\")\n  )\n)\n\n\n# Define UI for application\nui <- page_sidebar(\n  useShinyjs(),\n  # Application Bootswatch Theme\n  theme = bs_theme(\n    bootswatch = \"journal\"\n  ),\n  # Application title\n  title = \"Effects of Self-Efficacy on Post-Menopausal Women\",\n  \n  # Mobile Friendly:\n  fillable_mobile = TRUE,\n  # Sidebar with a slider input for number of bins \n  sidebar = sidebar(\n    title = \"Health Dimensions\",\n    width = 300,\n    fillable = TRUE,\n    accordion_filters <- accordion(\n      id = \"dims\",\n      accordion_panel(\n        \"Physical Health\",\n        icon = bs_icon(\"heart-pulse-fill\"),\n        checkboxGroupButtons(\"phys\",\n                             \"Select the following subfactors:\",\n                             choices = c(\"Nutrition\", \"Sleep\", \"Exercise\"),\n                             size = 'sm',\n        ),\n        div(id = \"nutrition\",\n            card(\n              card_header(\"Nutrition\"),\n              sliderTextInput(\"calorie_slider\",\n                              \"Caloric Intake:\",\n                              grid = TRUE,\n                              force_edges = TRUE,\n                              choices = c(\n                                \"Below Target\",\n                                \"At Target\",\n                                \"Above Target\")\n              ),\n              sliderTextInput(\"protein_slider\",\n                              \"Protein Intake:\",\n                              grid = TRUE,\n                              force_edges = TRUE,\n                              choices = c(\n                                \"Below Target\",\n                                \"At Target\",\n                                \"Above Target\")\n              ),\n              sliderTextInput(\"fat_slider\",\n                              \"Fat Intake:\",\n                              grid = TRUE,\n                              force_edges = TRUE,\n                              choices = c(\n                                \"Below Target\",\n                                \"At Target\",\n                                \"Above Target\")\n              ),\n              sliderTextInput(\"carb_slider\",\n                              \"Carbohydrate Intake:\",\n                              grid = TRUE,\n                              force_edges = TRUE,\n                              choices = c(\n                                \"Below Target\",\n                                \"At Target\",\n                                \"Above Target\")\n              ),\n              sliderTextInput(\"fasting_slider\",\n                              \"Choose the type of fasting:\",\n                              grid = TRUE,\n                              force_edges = TRUE,\n                              choices = c(\n                                \"Dry\",\n                                \"Water\",\n                                \"Intermittent\")\n              ),\n              sliderTextInput(\"other_nutr_slider\",\n                              \"Choose how much of any other nutritional factor:\",\n                              grid = TRUE,\n                              force_edges = TRUE,\n                              choices = c(\n                                \"Below Target\",\n                                \"At Target\",\n                                \"Above Target\")\n              ),\n            )\n        ),\n        div(id = \"sleep\",\n            card(\n              card_header(\"Sleep\"),\n              sliderInput(\"sleep_quan_slider\", \n                          \"Choose how many hours of Sleep:\",\n                          min = 0, max = 10, value = c(7,9)),\n              sliderTextInput(\"sleep_qual_slider\",\n                              \"Choose the quality of Sleep:\",\n                              grid = TRUE,\n                              force_edges = TRUE,\n                              choices = c(\n                                \"Terrible\",\n                                \"Excellent\")\n              ), \n              sliderInput(\"sleep_eat_slider\", \n                          \"Choose how many hours since eating before bed:\",\n                          min = 0, max = 8, value = 3,\n              ),\n              sliderInput(\"screentime_slider\", \n                          \"Choose how much screentime before bed:\",\n                          min = 0, max = 5, value = 3,\n              ),\n              sliderInput(\"melatonin_slider\", \n                          \"Choose how many mgs of Melatonin are taken before bed:\",\n                          min = 0, max = 10, value = 0,\n              ),\n            ), # Added missing comma here\n        ),\n        div(id = \"exercise\",\n            card(\n              card_header(\"Exercise\"),\n              sliderTextInput(\"swim_slider\",\n                              \"Choose the intensity of Swimming:\",\n                              grid = TRUE,\n                              force_edges = TRUE,\n                              choices = c(\n                                \"Moderate\",\n                                \"Intense\")\n              ),\n              sliderTextInput(\"run_slider\",\n                              \"Choose the intensity of Running:\",\n                              grid = TRUE,\n                              force_edges = TRUE,\n                              choices = c(\n                                \"Moderate\",\n                                \"Intense\")\n              ),\n              sliderTextInput(\"walk_slider\",\n                              \"Choose the intensity of Walking:\",\n                              grid = TRUE,\n                              force_edges = TRUE,\n                              choices = c(\n                                \"Moderate\",\n                                \"Intense\")\n              ),\n              sliderTextInput(\"hike_slider\",\n                              \"Choose the intensity of Hiking:\",\n                              grid = TRUE,\n                              force_edges = TRUE,\n                              choices = c(\n                                \"Moderate\",\n                                \"Intense\")\n              ),\n              sliderTextInput(\"bike_slider\",\n                              \"Choose the intensity of Biking:\",\n                              grid = TRUE,\n                              force_edges = TRUE,\n                              choices = c(\n                                \"Moderate\",\n                                \"Intense\")\n              ),\n              sliderTextInput(\"team_slider\",\n                              \"Choose the intensity of Team Sport:\",\n                              grid = TRUE,\n                              force_edges = TRUE,\n                              choices = c(\n                                \"Moderate\",\n                                \"Intense\")\n              ),\n              sliderTextInput(\"weight_slider\",\n                              \"Choose the intensity of Weightlifting:\",\n                              grid = TRUE,\n                              force_edges = TRUE,\n                              choices = c(\n                                \"Moderate\",\n                                \"Intense\")\n              ),\n              sliderTextInput(\"other_exerc_slider\",\n                              \"Choose the intensity of Other Exercise:\",\n                              grid = TRUE,\n                              force_edges = TRUE,\n                              choices = c(\n                                \"Moderate\",\n                                \"Intense\")\n              ),\n            )\n        ),\n      ),\n      accordion_panel(\n        \"Social Health\",\n        icon = bs_icon(\"people-fill\"),\n        card (\n          sliderInput(\"socialhours_slider\", \"Specify amount of hours socializing with non-friends per week:\",\n                      min = 0, max = 21, value = 10),\n          sliderInput(\"vol_slider\",\n                          \"Specify the amount of time a week spent doing community service:\",\n                      min = 0, max = 30, value = 10),\n          sliderInput(\"friends_slider\", \"Specify the amount of hours socializing with friends per week:\",\n                      min= 0, max = 25, value = 10)\n        )\n      ),\n      accordion_panel(\n        \"Mental Health\",\n        icon = bs_icon(\"person-circle\"),\n        card(\n          sliderInput(\"read_slider\", \"Choose how many hours spent reading:\",\n                      min = 0, max = 15, value = 5),\n          sliderInput(\"journal_slider\", \"Choose how many hours spent journalling:\",\n                      min = 0, max = 5, value = 3),\n          sliderInput(\"mental_slider\", \"Choose how many hours engaging in an activity that promotes wellbeing:\",\n                      min = 0, max = 20, value = 2)\n        )\n\n      ),\n      accordion_panel(\n        \"Spiritual Health\",\n        icon = bs_icon(\"yin-yang\"),\n        card(\n          sliderInput(\"meditate_slider\", \"Choose how many hours a week spent meditating:\",\n                      min = 0, max = 5, value = 2),\n          sliderInput(\"mindful_slider\", \"Choose how many hours a week are spent practicing mindfulness:\",\n                      min = 0, max = 5, value = 1),\n          sliderInput(\"religious_slider\", \"Choose how many hours a week spent at a religious institution:\",\n                      min = 0, max = 10, value = 3),\n          sliderInput(\"pray_slider\", \"Choose how many hours a week spent praying:\",\n                      min = 0, max = 3, value = 1),\n          sliderInput(\"yoga_slider\", \"Choose how many hours a week spent doing yoga:\",\n                      min = 0, max = 5, value = 3),\n          sliderInput(\"sacred_slider\", \"Choose how many hours a week are spent studying sacred texts:\",\n                      min = 0, max = 10, value = 2),\n          sliderInput(\"spirit_slider\", \"Choose how many hours a week are spent on other spiritual activities:\",\n                      min= 0, max = 10, value = 2)\n        )\n\n      ),\n    ),\n  ),\n  tabsetPanel(\n    tabPanel(\n      title = \"2D Plots\",\n      cards[[1]], \n    ),\n    tabPanel(\n      title = \"3D Plots\",\n      cards[[4]]\n    ),\n    layout_columns(cards[[3]], cards[[2]])\n  )\n  \n)\n\n# Define server logic\nserver <- function(input, output) {\n  f <- reactiveValues(\n    data = NULL,\n    design = NULL,\n    result = NULL\n  )\n  \n  \n  # Hide all the Sliders by default\n  observe({\n    isolate({\n      shinyjs::hide(\"nutrition\")\n      shinyjs::hide(\"sleep\")\n      shinyjs::hide(\"exercise\")\n    })\n  })\n  \n  observeEvent(input$phys,{\n    # Hides all the Sliders\n    shinyjs::hide(\"nutrition\")\n    shinyjs::hide(\"sleep\")\n    shinyjs::hide(\"exercise\")\n    \n    # Dynamically shows slider based on which Subfactor is chosen:\n    if (\"Nutrition\" %in% input$phys){\n      shinyjs::show(\"nutrition\")\n    } \n    if (\"Sleep\" %in% input$phys){\n      shinyjs::show(\"sleep\")\n    }\n    if (\"Exercise\" %in% input$phys){\n      shinyjs::show(\"exercise\")\n    } \n  })\n  \n  factorCalc <- reactive({\n    # Create a vector of the number of levels for each factor\n    levels <- c(2,2)\n    \n    # Factor names:\n    factorNames <- c(\"Nutrition\", \n                     \"Sleep\")\n    \n    # Generate the full factorial design\n    design <- gen.factorial(levels, nVars = 2, varNames = factorNames)\n    \n    thickness<-c(rnorm(15, 2.5, 2.5), rnorm(15, 3, 2.5), \n                 rnorm(15, 3.5, 2.5), rnorm(15, 2, 2.5)\n                 ) \n    \n    Sleep_Hours <- c(rep(\"Insufficient\",15), rep(\"Sufficient\",15), \n                     rep(\"Sufficient\",15), rep(\"Insufficient\",15)\n    ) \n    \n    Exercise_Hours <- c(rep(\"Intense\",30), rep(\"Moderate\",30), \n                        rep(\"Intense\",30), rep(\"Moderate\",30)\n    )\n    \n    data <- data.frame(Sleep_Hours, Exercise_Hours, thickness)\n    \n    A <- data$Sleep_Hours\n    B <- data$Exercise_Hours\n    Z <- data$thickness\n    \n    f$design <- design\n    f$data <- data\n    f$result <- aov(Z ~ A*B)\n  })\n  \n  output$test <- renderPlot({\n    factorCalc()\n    df <- f$data\n    A <- df$Sleep_Hours\n    B <- df$Exercise_Hours\n    Z <- df$thickness\n    interaction.plot(A, B, Z,\n                      xlab = \"Sleep Hours\",\n                      ylab = \"Overall Health Score\",\n                     trace.label = \"Exercise Hours\")\n  })\n  \n  output$factorial <- renderPlotly({\n    factors = 3\n    levels = c(0,1)\n    sleep = c()\n    exercise = c()\n    nutrition = c()\n    \n    combinations <- expand.grid(sleep = levels, exercise = levels, nutrition = levels)\n    sleep <- combinations$sleep\n    exercise <- combinations$exercise\n    nutrition <- combinations$nutrition\n    \n    threedf = data.frame(row.names = c(1:length(sleep)), sleep,exercise, nutrition)\n    threedf$sleep_hovertext <- ifelse(threedf$sleep == 0, \"Low\", \"High\")\n    threedf$exercise_hovertext <- ifelse(threedf$exercise == 0, \"Low\", \"High\")\n    threedf$nutrition_hovertext <- ifelse(threedf$nutrition == 0, \"Low\", \"High\")\n    \n    plot <- plot_ly()\n    \n  #TEMPORARY SOLUTION FOR NOW WILL CHANGE LATER :)\n    # Define the edges of the cube as pairs of vertex indices\n    edges <- list(\n      # Bottom square\n      c(1,2), c(2,3), c(3,4), c(4,1),\n      # Top square\n      c(5,6), c(6,7), c(7,8), c(8,5),\n      # Vertical edges\n      c(1,5), c(2,6), c(3,7), c(4,8)\n    )\n    \n    # Create vertices of the box\n    vertices <- data.frame(\n      x = c(0,0,1,1,0,0,1,1),\n      y = c(0,1,1,0,0,1,1,0),\n      z = c(0,0,0,0,1,1,1,1)\n    )\n    for (edge in edges) {\n      plot <- plot %>% add_trace(plot,\n                                 x = vertices$x[edge],\n                                 y = vertices$y[edge],\n                                 z = vertices$z[edge],\n                                 type = 'scatter3d',\n                                 mode = 'lines',\n                                 line = list(color = 'black', width = 5),\n                               #Skip doesn't show hoverinfo for the trace\n                                 hoverinfo = 'skip'\n      )\n    }\n    plot <- plot %>% add_trace(threedf, \n              x = ~sleep, \n              y = ~exercise, \n              z = ~nutrition, \n              type = 'scatter3d', \n              mode = 'markers', \n              marker = list(\n                size = 7\n              ),\n              hovertemplate = paste(\n                \"Sleep:\",\n                threedf$sleep_hovertext,\n                \"<br>\",\n                \"Exercise:\",\n                threedf$exercise_hovertext,\n                \"<br>\",\n                \"Nutrition:\",\n                threedf$nutrition_hovertext,\n              # Extra removes to the trace number\n                \"<extra><\/extra>\"\n              )\n            )\n    plot\n  })\n  \n  output$anova <- renderTable({\n    factorCalc()\n    anova(f$result)\n  })\n  \n  output$design <- renderUI({\n    factorCalc()\n    data <- as.data.frame(f$design)\n    HTML(\n      kable(data, row.names = T)  |>\n        kable_styling('striped',fixed_thead = T, full_width = F) |>\n        column_spec(2,color= 'white',\n                    background = spec_color(data$Nutrition,end = 0.7, option = 'A' )) |>\n        column_spec(3,color= 'white',\n                    background = spec_color(data$Sleep,end = 0.7, option = 'A' )) |>\n        scroll_box(data, height = '400px')\n    )\n\n  })\n  \n  \n}\n\n# Run the application \nshinyApp(ui,server)","type":"text"},{"name":"R/2k Factor Design.Rmd","content":"---\ntitle: \"2k Factorial\"\nauthor: \"Rachel Hart\"\ndate: \"`r Sys.Date()`\"\noutput: html_document\n---\n```{r, echo = FALSE}\nlibrary(designr)\nlibrary(AlgDesign)\nlibrary(tidyverse)\nlibrary(ggplot2)\nlibrary(plotly)\nlibrary(knitr)\nlibrary(kableExtra)\nlibrary(plot3D)\n```\n\n```{r}\nlibrary(designr)\ndesign1 <- \n  fixed.factor(\"Sleep\", levels=c(\"Low\", \"High\")) +\n  fixed.factor(\"Exercise\",  levels=c(\"Under 30 Minutes\", \"Over 30 Minutes\")) +\n  fixed.factor(\"Spirituality\", levels =c(\"Under 20 minutes\", \"Over 20 Minutes\")) +\n  fixed.factor(\"Engagement\", levels =c(\"Under 20 minutes\", \"Over 20 Minutes\")) +\n  fixed.factor(\"Nutrition\", levels =c(\"Low\", \"High\")) +\n  fixed.factor(\"Cognition\", levels =c(\"Low\", \"High\")) \ndesign1\n\n# Add more factors\n# Make them dynamic based on a variable predetermined before (relate it to the menu and shiny and user input)\n## Use paste to create the levels\n```\n\n```{r}\n# Full factorial design\nlibrary(AlgDesign)\n\n# Create a vector of the number of levels for each factor\nlevels <- c(2, 2, 2, 2, 2, 2)\n\n# Generate the full factorial design\ndesign <- gen.factorial(levels, nVars = 3)\ndesign\n```\n\n```{r}\n#Create a vector column for thickness \nhealth<-c(rnorm(15, 4.5, 2.5), rnorm(15, 3.5, 2.5), rnorm(15, 5.5, 2.5), rnorm(15, 2.5, 2.5))\n\n#Create the factors \nsleep <- c(rep(\"5\",15), \n\t\t\t\t\t\trep(\"9\",15), \n\t\t\t\t\t\trep(\"9\",15), \n\t\t\t\t\t\trep(\"5\",15)) \n\nexercise <- c(rep(\"60\",15), \n\t\t\t\t\trep(\"30\",15), \n\t\t\t\t\trep(\"60\",15), \n\t\t\t\t\trep(\"30\",15)) \n\n#Merge the data into a dataset 'data' \ndata<- data.frame(sleep, \n\t\t\t\texercise, \n\t\t\t\thealth) \ndata\n\n#Assign the factors into variables \nA = data$sleep \nB = data$exercise \nZ = data$health \n\nresult <-aov(Z ~ A*B) \n\n#Plot the anova table \nanova(result) \n\n#Plot the interaction plot \ninteraction.plot(A, B, Z, \n\t\t\t\txlab = \"Sleep\", \n\t\t\t\tylab = \"Health\") \n\n```\n### Two Factor Two Levels\n```{r}\nfactors = 2\nlevels = c(-1,1)\nx1 = c()\nx2 = c()\n\nfor (j in 1:length(levels)) {\n    for (i in 1:length(levels)) {\n    x1 = c(x1, levels[i])\n    x2 = c(x2, levels[j])\n  }\n}\n\ntwodf = data.frame(row.names =  c(1:length(x1)), x1,x2)\n\nkable(twodf, row.names = T)  |>\n  kable_styling('striped',fixed_thead = T, full_width = F) |>\n\n  column_spec(2,color= 'white',\n              background = spec_color(twodf$x1,end = 0.7, option = 'A' )) |>\n  column_spec(3,color= 'white',\n              background = spec_color(twodf$x2 ,end = 0.7, option = 'A' ))\n\nplot_ly(twodf, x = ~x1, y = ~x2) \n```\n\n### Three Factors Two Levels\n```{r}\nfactors = 3\nlevels = c(0,1)\nsleep = c()\nexercise = c()\nnutrition = c()\n\nfor (k in 1:length(levels))\n  for (j in 1:length(levels)) {\n      for (i in 1:length(levels)) {\n      sleep = c(sleep, levels[i])\n      exercise = c(exercise, levels[j])\n      nutrition = c(nutrition, levels[k])\n    }\n  }\n\nthreedf = data.frame(row.names = c(1:length(sleep)), sleep,exercise, nutrition)\nprint(threedf)\n\n\nkable(threedf, row.names = T)  |>\n  kable_styling('striped',fixed_thead = T, full_width = F) |>\n    column_spec(2,color= 'white',\n              background = spec_color(threedf$sleep,end = 0.7, option = 'A' )) |>\n    column_spec(3,color= 'white',\n              background = spec_color(threedf$exercise ,end = 0.7, option = 'A' )) |>\n    column_spec(4,color= 'white',\n              background = spec_color(threedf$nutrition ,end = 0.7, option = 'A' )) |>\n    scroll_box(threedf, height = '400px')\n```\n\n```{r}\nplot_ly(threedf, x = ~sleep, y = ~exercise, z = ~nutrition, type = 'scatter3d', mode = 'lines+markers', \n        line = list(width = 7),\n        marker = list(size = 5))\n# Make cube have edges and thicker dot\n# Rename axis to have exercise high, nutrition high etc...\n```\n\n","type":"text"},{"name":"test.R","content":[],"type":"text"}]
